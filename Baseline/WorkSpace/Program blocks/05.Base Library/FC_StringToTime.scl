FUNCTION "FC_StringToTime" : Void
TITLE = FC_StringToTime
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : MHSE
FAMILY : GeneralSystemFunctions
VERSION : 3.0
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 27
// END_ATTRIBUTES
//Function to convert date in string format to the DTL.
   VAR_INPUT 
      is_StringTime : String;   // Input string with date
   END_VAR

   VAR_OUTPUT 
      qt_Date {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Output Date in DTL
   END_VAR

   VAR_TEMP 
      ts_DateInt : Struct   // Temp partial date in integer
         Year : UInt;
         Month : USInt;
         Day : USInt;
         Hour : USInt;
         Minute : USInt;
         Second : USInt;
         Millisecond : UDInt;
      END_STRUCT;
      ts_DateString : Struct   // Temp partial date in string
         Hour : String[2];
         Minute : String[2];
         Second : String[2];
         Millisecond : String[3];
      END_STRUCT;
   END_VAR

   VAR CONSTANT 
      ci_StringLength2 : Int := 2;   // Length of the part of the string
      ci_StringLength3 : Int := 3;   // Length of the part of the string
      ci_StringPosition1 : Int := 1;   // Position of the first caracter inside the string
      ci_StringPosition4 : Int := 4;   // Position of the first caracter inside the string
      ci_StringPosition7 : Int := 7;   // Position of the first caracter inside the string
      ci_StringPosition10 : Int := 10;   // Position of the first caracter inside the string
      cw_FormatZero : Word := 0;   // Simple value format
      Ci_Year : UInt := 1970;   // Fixed year 1970, start value dtl
      ci_Month : USInt := 1;   // Fixed month 1, start value dtl
      ci_Day : USInt := 1;   // Fixed day 1, start value dtl
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	                                                                                  
	Version history:
	Date        | Version   | Author        | Remark
	----------------------------------------------------------------------------------------
	24/05/2019  | 0.1       | K.Pokorski    | first release MHS TIA 15.1
	26/06/2019  | 0.2       | M.Kurpiers    | Change in region 1 P:=3 -> P:=4
	24/07/2019  | 2.0       | L.Klar        | 2.0 MHS library release TIA 15.1
	26/07/2019  | 2.1       | M.Kurpiers    | Comments adjusted
	12/11/2019  | 3.0       | P.Majka       | 3.0 MHS library release TIA 15.1
	16/02/2023  | 3.1       | F.Baten       | Added constants
	21/02/2023  | 4.0       | F.Baten       | 4.0 Release TIA 17.5
	*)
	
	REGION 1 - Separation different part of the date 
	    
	    // Separation different part of the date from the data string and saving it to the structure
	    #ts_DateString.Hour := MID(IN := #is_StringTime,
	                               L := #ci_StringLength2,
	                               P := #ci_StringPosition1);               // Separating an hour from the date string  
	    #ts_DateString.Minute := MID(IN := #is_StringTime,
	                                 L := #ci_StringLength2,
	                                 P := #ci_StringPosition4);             // Separating a minute from the date string 
	    #ts_DateString.Second := MID(IN := #is_StringTime,
	                                 L := #ci_StringLength2,
	                                 P := #ci_StringPosition7);             // Separating a second from the date string 
	    #ts_DateString.Millisecond := MID(IN := #is_StringTime,
	                                      L := #ci_StringLength3,
	                                      P := #ci_StringPosition10);       // Separating a millisecond from the date string 
	    
	END_REGION
	
	REGION 2 - Conversion string to integer
	    
	    STRG_VAL(IN := #ts_DateString.Hour,                         // Conversion a hour from string 
	             FORMAT := #cw_FormatZero,                          // Simple value format
	             P := INT_TO_UINT(#ci_StringPosition1),             // First position in string
	             OUT => #ts_DateInt.Hour);                          // Integer temporary variable
	    // Conversion a minute from string 
	    STRG_VAL(IN := #ts_DateString.Minute,
	             FORMAT := #cw_FormatZero,
	             P := INT_TO_UINT(#ci_StringPosition1),
	             OUT => #ts_DateInt.Minute);
	    // Conversion a second from string 
	    STRG_VAL(IN := #ts_DateString.Second,
	             FORMAT := #cw_FormatZero,
	             P := INT_TO_UINT(#ci_StringPosition1),
	             OUT => #ts_DateInt.Second);
	    // Conversion a milisecond from string
	    STRG_VAL(IN := #ts_DateString.Millisecond,
	             FORMAT := #cw_FormatZero,
	             P := INT_TO_UINT(#ci_StringPosition1),
	             OUT => #ts_DateInt.Millisecond);
	    
	END_REGION
	
	REGION 3 - Combine integer to "DTL" data type and setting output
	    
	    // Move parts of the date to the DTL output structure 
	    #qt_Date.YEAR := #Ci_Year;
	    #qt_Date.MONTH := #ci_Month;
	    #qt_Date.DAY := #ci_Day;
	    #qt_Date.HOUR := #ts_DateInt.Hour;
	    #qt_Date.MINUTE := #ts_DateInt.Minute;
	    #qt_Date.SECOND := #ts_DateInt.Second;
	    #qt_Date.NANOSECOND := #ts_DateInt.Millisecond * 1000000;
	    
	END_REGION
END_FUNCTION

