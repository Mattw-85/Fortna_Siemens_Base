TYPE "UDT_PECStatus"
VERSION : 0.1
   STRUCT
      PEC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Current state of the photo eye
      Jam { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // PEC jam error
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdStatus"
TITLE = UDT_VfdStatus
VERSION : 0.1
//User-defined structure of VFD status.
   STRUCT
      ErrorCode : Int;   // Error code
      SubErrorCode : Int;   // Sub error code
      PNSlaveNotonline : Bool := FALSE;   // Profinet slave is not on line
      PNSlaveError : Bool := FALSE;   // Profinet slave has an error
      InternalError : Bool := FALSE;   // A VFD internal error is active, see error code
      InternalWarning : Bool := FALSE;   // A VFD internal warning is active, see error code
      CommunicationErrorMovikit : Bool := FALSE;   // Communication error with MoviKit
      VFDRunningFeedbackError : Bool := FALSE;   // Motor is not running
      PNSlaveWarning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave has a warning
   END_STRUCT;

END_TYPE

TYPE "UDT_PDPStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific
         CircuitBreakersTripped : Bool;   // Circuit breakers tripped when the value is true
         CircuitBreakerStateF100_F200_F300 : Bool;   // Circuit Breaker State Ok if the signal is true
         CircuitBreakerStatePM : Bool;   // Circuit Breaker State Ok if the signal is true
         CircuitBreakerTrippedF101 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF102 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF103 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF104 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF105 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF106 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF107 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF108 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF109 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF110 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF111 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF112 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF113 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF114 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF115 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF116 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF117 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF118 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF119 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF120 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF121 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF122 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF123 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF124 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF125 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF126 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF127 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF128 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF129 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF130 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF131 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF132 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF133 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF134 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF135 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF201 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF202 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF203 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF204 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF205 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF206 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF207 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF208 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF209 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF210 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF211 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF212 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF213 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF214 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF215 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF216 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF217 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF218 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF219 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF220 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF221 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF222 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF223 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF224 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF225 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF226 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF227 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF228 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF229 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF501 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF502 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF503 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF504 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF505 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF506 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF507 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF508 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF509 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF510 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF511 : Bool;   // Circuit breaker is tripped when the value is true
         CircuitBreakerTrippedF512 : Bool;   // Circuit breaker is tripped when the value is true
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_ColumnLift_Status"
TITLE = UDT_VSUStatus
VERSION : 0.1
//User-defined structure of FB_VerticalSwitch function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         ReferenceError : Bool;   // Active when more like one position sensor active
         SwitchingTimerError : Bool;   // Switching time error
         LimitSensorUpperPosition : Bool;   // Limit switch for upper position active
         LimitSensorLowerPosition : Bool;   // Limit switch for lower position active
         UpperPosition : Bool;   // Upper position reached
         LowerPosition : Bool;   // Lower position reached
         ChuteNotInPosition : Bool;   // The chute is not supported by a column
         MaintenaceModeActive : Bool;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_Outfeed2StatesStatus"
VERSION : 0.1
//User-defined structure of FB_CH03 function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // CH02 specific status structure
         ChuteFull : Bool;   // Chute is full status
         ChuteHalfFull : Bool;   // Chute is half full status
         ChuteDisabled : Bool;   // Chute is disabled status
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_TPInterfaceV2"
VERSION : 0.1
   STRUCT
      ActiveScreen : Int;   // HMI Actual Screen Number
      SelectedZone : Int;   // HMI Selected Zone
      SelectedZoneNumber : Int;   // HMI Selected Zone Number
      SelectedSection : Int;   // HMI Selected Section
      SelectedConveyor : DInt;   // HMI Selected Conveyor
      ConnectionOK : Bool;   // HMI Connection ON
      UserLoggedOn : Bool;   // Actual User Logged
      HeartBeat : Bool;   // Heart Beat
      RequestManual : Bool;   // Request Manual Mode
      UserGroup : Int;   // User Group 1 - Admin, 2 - Service, 3 - Operator
      ActiveUser : WString;
      ActiveLanguage : Int;
      SelectedIndex : UDInt;
      ScreanNumber : UDInt;
      UserNumber : SInt;
   END_STRUCT;

END_TYPE

TYPE "UDT_TCPIPConnectStatusV2"
TITLE = UDT_TCPIPConnectStatus
VERSION : 0.1
//User-defined structure of FB_TCPIPConnect function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific status structure
         ErrorCode : Struct   // Error code structure
            TCON : Word;   // Siemens TCON error code - Check documetation
            TDISCON : Word;   // Siemens TDISCON error code - Check documetation
            TDIAG : Word;   // Siemens TDIAG error code - Check documetation
         END_STRUCT;
         Connected : Bool;   // Connected
         CommunicationFault : Bool;   // Communication fault
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_MFCEvent"
VERSION : 0.1
   STRUCT
      Alarms : Array[1..10] of Struct   // Alarm structure
         AlarmText : String;
         Active : Bool;
         ResetPLC : Bool;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_MCPStatus"
TITLE = Cabinet MCP Status
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific
         PN_PN_MSP_PNSlaveNotOnline : Bool;   // PNPN coupler is not online
         PN_PN_MSP_PNSlaveError : Bool;   // PNPN coupler has an error
         PN_PN_MSP_PNSlaveWarning : Bool;   // PNPN coupler has a warning
         IOModule_PNSlaveNotOnline : Bool;   // I/O Module is not online
         IOModule_PNSlaveError : Bool;   // I/O Module has an error
         IOModule_PNSlaveWarning : Bool;   // I/O Module has a warning
         ScalanceSwitchPNSlaveNotOnline : Bool;   // Scalance switch is not online (Switch 1)
         ScalanceSwitchPNSlaveError : Bool;   // Scalance switch has an error (Switch 1)
         ScalanceSwitchPNSlaveWarning : Bool;   // Scalance switch has a warning (Switch 1)
         ScalanceSwitchStatus : Bool;   // TRUE when Scalance switch is not healthy (Switch 1)
         "2ndScalanceSwitchPNSlaveNotOnline" : Bool;   // Scalance switch is not online (Switch 2)
         "2ndScalanceSwitchPNSlaveError" : Bool;   // Scalance switch has an error (Switch 2)
         "2ndScalanceSwitchPNSlaveWarning" : Bool;   // Scalance switch has a warning (Switch 2)
         "2ndScalanceSwitchStatus" : Bool;   // TRUE when Scalance switch is not healthy (Switch 2)
         Singulator_PNSlaveNotOnline : Bool;   // Singulator coupler is not online
         Singulator_PNSlaveError : Bool;   // Singulator coupler has an error
         Singulator_PNSlaveWarning : Bool;   // Singulator coupler has a warning
         IPC_PNSlaveNotOnline : Bool;   // IPC is not online
         IPC_PNSlaveError : Bool;   // IPC has an error
         IPC_PNSlaveWarning : Bool;   // IPC has a warning
         UPSSwitchTripped : Bool;   // Unit Power Supply switch tripped
         FireAlarmActive : Bool;   // Fire alarm active when the signal is true
         PS_201T1_Tripped : Bool;   // TRUE if power supply 201T1 tripped
         "230VAC_CB101F4Tripped" : Bool;   // TRUE if MCP circuit breaker 101F4 tripped
         "230VAC_CB102F1Tripped" : Bool;   // TRUE if MCP circuit breaker 102F1 tripped
         "24VDC_CB201F1Tripped" : Bool;   // TRUE if MCP circuit breaker 201F1 tripped
         "24VDC_CB205F5Tripped" : Bool;   // TRUE if MCP circuit breaker 205F5 tripped
         Spare_1 : Bool;   // Spare
         Spare_2 : Bool;   // Spare
         Spare_3 : Bool;   // Spare
         RackSlotError : Array[0..31] of Bool;   // One of the main rack slots has an error
         IOModuleSlotError : Array[0..31] of Bool;   // Module error
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_ABSwitchStatus"
TITLE = UDT_VSUStatus
VERSION : 0.1
//User-defined structure of FB_VerticalSwitch function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         ReferenceError : Bool;   // Active when more like one position sensor active
         SwitchingTimerError : Bool;   // Switching time error
         LimitSensorUpperPosition : Bool;   // Limit switch for upper position active
         LimitSensorLowerPosition : Bool;   // Limit switch for lower position active
         UpperSwitchAreaError : Bool;   // Upper switching area PEC was activated when moving
         LowerSwitchAreaError : Bool;   // Lower switching area PEC was activated when moving
         UpperPosition : Bool;   // Upper position reached
         LowerPosition : Bool;   // Lower position reached
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_LoaderStatus"
TITLE = UDT_LoaderStatus
VERSION : 0.1
//User-defined structure of FB_Loader function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         Disabled { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Loader is disabled by HMI
         VFDError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Loader has an VFD error
         NotHealthy { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Loader is not healthy
         StoreMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Extendable is in store mode
         FeedMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Extendable is in feed mode
         RunMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Extendable is in run mode
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_ConnectStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific status structure
         Connected { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Connected
         CommunicationFault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Communication fault
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_EuchnerLockStatusV2"
VERSION : 0.1
   STRUCT
      LockFault : Bool;   // Internal lock fault
      DoorClosed : Bool;   // The door is closed
      DoorOpened : Bool;   // The door is opened
      BoltTongueClosed : Bool;   // The lock bolt tongue is closed
      ReqMissingAccessRights : Bool;   // Button access request triggered without permission from DHL
      ResetMissingAccessRights : Bool;   // Button reset triggered without permission from DHL
      DoorOpenedWithoutReq : Bool;   // Doors were opened without request and permission
      Safelylocked : Bool;   // The lock is safely locked
      SafetyLockAckReq : Bool;   // The safety lock signal needs to be confirmed
   END_STRUCT;

END_TYPE

TYPE "UDT_ConveyorInterface"
TITLE = UDT_ConveyorInterface
VERSION : 0.1
//User-defined structure of conveyor interface variables.
   STRUCT
      Displacement : Int;   // Displacement per PLC scan [cm] either from position (if available) or speed and time
      SpeedSetpoint : Int;   // Conveyor speed setpoint [mm/s]
      ActualSpeed : Int;   // Conveyors actual speed [mm/s]
      DeltaPosition : Int;   // Read from Conveyor Servo Position [mm] after 1 PLC cycle
      RunFwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Run forward request
      RunRvs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Run reverse request
      InternalErrorEncoder { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Encoder has an error
      InternalErrorVFD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // VFD has an error
      InternalErrorTracking { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Tracking has an error
      InternalErrorPEC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // PEC has an error
      InternalWarningVFD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // VFD has a warning
      InternalWarningTracking { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Tracking has a warning
      InternalErrorReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Reset internal errors
      ConfigurationError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Configuration error is active
      VFDRunning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor is running
      VFDatSpeed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Motor at speed setpoint
      Disconnected { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // VFD disconnected
      ManualModeActive { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Covneyor is in manual mode
      ResetStatistics { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Reset statistics
      HardwareOk { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Hardware for the Equipment is available and healthy
   END_STRUCT;

END_TYPE

TYPE "UDT_EncoderStatusV2"
VERSION : 0.1
   STRUCT
      InvalidValue : Bool;   // Invalid value
      RunningFeedbackError : Bool;   // Running feedback error
   END_STRUCT;

END_TYPE

TYPE "UDT_ControlPowerGroupWORStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct
         PowerSuppliesError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Power supplly error
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_CodingBeltModesStatus"
VERSION : 0.1
   STRUCT
      Status : Int;
      Specific : Struct
         Infeed_LabellingMode : Bool;
         Infeed_ContinueMode : Bool;
         Infeed_BufferMode : Bool;
         Outfeed_LabellingMode : Bool;
         Outfeed_ContinueMode : Bool;
         Outfeed_BufferMode : Bool;
         GeneralError : Bool;
         ConfigurationError : Bool;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_DimensionsCheckStatusV2"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific status
         ParcelTooLongError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too long
         ParcelTooShortError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too short
         ParcelTooHighError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too high
         ParcelTooLowError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too low
         ParcelTooWideError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too wide
         ParcelTooNarrowError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - parcel is too narrow
         IncorrectParcelOrientationError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Error - Incorrect parcel orientation
         GeneralError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // General error
         DisabledGeneralFunctionality { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled general DMC functionality
         DisabledTooLongParcel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooLongParcel" detection
         DisabledTooShortParcelError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooShortParcel" detection
         DisabledTooHighParcelError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooHighParcel" detection
         DisabledTooLowParcelError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooLowParcel" detection
         DisabledTooWideParcelError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooWideParcel" detection
         DisabledTooNarrowParcelError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "TooNarrowParcel" detection
         DisabledParcelOrientationError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Disabled "ParcelOrientation" detection
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_RIOStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific structure
         PNSlaveNotOnline { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is not online
         PNSlaveError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is in error
         ET200sp_ErrorModule : Array[0..31] of Bool;   // Module error
         PNSlaveWarning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave has a warning
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_PNNodeStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Specific structure
         PNSlaveNotOnline { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is not online
         PNSlaveError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is in error
         PNSlaveWarning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave has  a warning
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_CaljanStatusV2"
TITLE = UDT_UnloaderStatus
VERSION : 0.1
//User-defined structure of FB_Unloader function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         PEC_EoS : "UDT_PECStatus";   // PEC status structure
         PNSlaveNotOnline { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is not online
         PNSlaveError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave is in error
         PNSlaveWarning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Profinet slave has  a warning
         Disabled { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader is disabled by HMI
         VFDError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader has an VFD error
         NotHealthy { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader is not healthy
         StoreMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Store mode activated
         RunMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Run mode activated
         LowerOngoing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // "lower belt" hydraulic valve is active
         RaisingOngoing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // "raise belt" hydraulic valve is active
         ChuteBlocked { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Chute blocked activated
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_RapiscanStatus"
TITLE = UDT_HS10080XCTStatus
VERSION : 0.1
//User-defined structure of FB_Xray_HS10080XCT function block status.
   STRUCT
      Status : Int;   // Status number
      XraySpecific : Struct   // Equipment specific warnings and errors
         XrayEnergised : Bool;   // Xray Energised
         XrayFault : Bool;   // Xray Fault
         XrayRdyRCV : Bool;   // Xray Ready receive
         XrayRdySend : Bool;   // Xray Ready send
         BagScanning : Bool;   // Xray bag scaning
         TransportMode : Bool;   // Transport mode active
         BackBelt : Bool;   // Backbelt functinality active
      END_STRUCT;
      ConvSpecific : Struct   // Equipment specific warnings and errors
         Status : Int;   // Status number
         Conv_ERR : Bool;   // Conveyor is in error
         Encoder_ERR : Bool;   // Encoder error
         ConvRunFWD : Bool;   // Conveyor run forward direction
         ConvRunREV : Bool;   // Conveyor run reverse direction
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_RetractrableRoller_Status"
VERSION : 0.1
   STRUCT
      Status : Int;
      Specific : Struct
         NoHomePosition : Bool;
         RollerError : Bool;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_BiDirectionalStatus"
VERSION : 0.1
   STRUCT
      InfeedModeRequested : Bool;   // Mode change is in progress
      OutfeedModeRequested : Bool;   // Mode change is in progress
      InfeedModeActive : Bool;   // Mode active and system running
      OutfeedModeActive : Bool;   // Mode active and system running
      InfeedModeReady : Bool;   // System is ready to restart, wait for start command
      OutfeedModeReady : Bool;   // System is ready to restart, wait for start command
      ChangingMode : Bool;   // The mode will now be changed
   END_STRUCT;

END_TYPE

FUNCTION "FC_GetNrOfArrayEl" : Int
TITLE = FC_GetNrOfArrayEl
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : MHSE
FAMILY : GeneralSystemFunctions
VERSION : 3.0
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 19
// END_ATTRIBUTES
//Function to get the number of array elements.
   VAR_INPUT 
      iv_Array : Variant;   // Input array
   END_VAR

   VAR_TEMP 
      ti_NrOfArrayEl : Int;   // Number of array elements
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	                                                                                  
	Version history:
	Date        | Version   | Author        | Remark
	----------------------------------------------------------------------------------------
	24/05/2019  | 0.1       | L.Klar        | first release MHS TIA 15.1
	24/07/2019  | 2.0       | L.Klar        | 2.0 MHS library release TIA 15.1
	27/08/2019  | 2.1       | K.Pokorski    | Comments adjusted
	12/11/2019  | 3.0       | P.Majka       | 3.0 MHS library release TIA 15.1
	21/02/2023  | 4.0       | F.Baten       | 4.0 Release TIA 17.5
	*)
	
	REGION 1 – Number of an array elements
	    
	    IF IS_ARRAY(#iv_Array)                                                  // Input variable is an array
	    THEN
	        
	        #ti_NrOfArrayEl := UDINT_TO_INT(CountOfElements(#iv_Array));
	        
	        // Reset array length if the input variable isn't an array
	    ELSE
	        
	        #ti_NrOfArrayEl := 0;
	        
	    END_IF;
	    
	END_REGION
	
	REGION 2 – Return output
	    
	    #FC_GetNrOfArrayEl := #ti_NrOfArrayEl;
	    
	END_REGION
	
END_FUNCTION

TYPE "UDT_PECUpdateStatus"
TITLE = UDT_PECUpdateStatus
VERSION : 0.1
//User-defined structure of FB_PECUpdate function block status.
   STRUCT
      TooManyLost { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Too many parcels lost in a row
      LowPerformance { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Performance warning
      PEC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Current state of the end of section photo eye
      Jam { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // PEC Jam error
   END_STRUCT;

END_TYPE

TYPE "UDT_TP_UserAlarm"
VERSION : 0.1
   STRUCT
      Language1 : String;   // Language 1 alarm text
      Language2 : String;   // Language 2 alarm text
   END_STRUCT;

END_TYPE

TYPE "UDT_UnloaderStatus"
TITLE = UDT_UnloaderStatus
VERSION : 0.1
//User-defined structure of FB_Unloader function block status.
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         PEC_EoS : "UDT_PECStatus";   // PEC status structure
         Disabled { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader is disabled by HMI
         TooLongParcel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader detected a too long parcel
         VFDError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader has an VFD error
         NotHealthy { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Unloader is not healthy
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_ArmDiverterStatus"
VERSION : 0.1
   STRUCT
      Status : Int;   // Status number
      Specific : Struct   // Equipment specific warnings and errors
         TimeoutError : Bool;   // Arm movement timed out
         LimitHomeError : Bool;   // Limit swich sensor error
         LimitDivertError : Bool;   // Limit swich sensor error
         PXHomeError : Bool;   // Proxy sensor error
         PXDivertError : Bool;   // Proxy sensor error
         AtHomePosition : Bool;   // Arm is in home position
         AtDivertPosition : Bool;   // Arm is in divert position
         ReferencError : Bool;   // Referencing error - the arm is not detected by any sensor.
         ParcelDivertError : Bool;   // Parcel diversion error, time too long
         JamExitSensor : Bool;   // Jam on Exit sensor
      END_STRUCT;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "FB_TP_ALARM_CPG"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 174
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_CPG_Status : "UDT_ControlPowerGroupWORStatus";   // CPG WOR Status
   END_VAR

   VAR 
      CPG {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm CPG
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | CPG Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Power Supplies Error
	    // Program Alarm CPG
	    #CPG(SIG := #iq_UDT_CPG_Status.Specific.PowerSuppliesError,
	         TIMESTAMP := #Time,
	         SD_1 := #is_ID);
	END_REGION
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_ArmDiverter"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 166
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_ArmDiverterStatus : "UDT_ArmDiverterStatus";   // Status
   END_VAR

   VAR 
      TimeoutError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm timeout error
      LimitHomeError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit home error
      LimitDivertError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit divert error
      PXHomeError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm at PXHome error
      PXDivertError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm at PXDivert error
      AtHomePosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm at home position error
      AtDivertPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm at divert position error
      ReferencError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm reference error
      ParcelDivertError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm parcel divert error
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	25/4/2022   | 1.0       | M. Diebel       | Arm diverter Alarm | DHL Munich 2023
	20/10/2023  | 1.1       | S. Nikodem      | Text alarm update
	13/3/2024   | 1.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - TimeOutError
	    //Program alarm timeout error
	    #TimeoutError(SIG := #iq_UDT_ArmDiverterStatus.Specific.TimeoutError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - LimitHomeError
	    //Program alarm limit home error
	    #LimitHomeError(SIG := #iq_UDT_ArmDiverterStatus.Specific.LimitHomeError,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - LimitDivertError
	    //Program alarm limit divert error
	    #LimitDivertError(SIG := #iq_UDT_ArmDiverterStatus.Specific.LimitDivertError,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - PXHomeError
	    //Program alarm at PXHome error
	    #PXHomeError(SIG := #iq_UDT_ArmDiverterStatus.Specific.PXHomeError,
	                 TIMESTAMP := #Time,
	                 SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - PXDivertError
	    //Program alarm at PXDivert error
	    #PXDivertError(SIG := #iq_UDT_ArmDiverterStatus.Specific.PXDivertError,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - AtHomePosition
	    //Program alarm at home position error
	    #AtHomePosition(SIG := #iq_UDT_ArmDiverterStatus.Specific.AtHomePosition,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - AtDivertPosition
	    //Program alarm at divert position error
	    #AtDivertPosition(SIG := #iq_UDT_ArmDiverterStatus.Specific.AtDivertPosition,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - ReferencError
	    //Program alarm reference error
	    #ReferencError(SIG := #iq_UDT_ArmDiverterStatus.Specific.ReferencError,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - ParcelDivertError
	    //Program alarm parcel divert error
	    #ParcelDivertError(SIG := #iq_UDT_ArmDiverterStatus.Specific.ParcelDivertError,
	                       TIMESTAMP := #Time,
	                       SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_CodingBeltModes"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 169
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_CodingBeltModesStatus : "UDT_CodingBeltModesStatus";
   END_VAR

   VAR 
      Infeed_LabellingMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      Infeed_ContinueMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      Infeed_BufferMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      Outfeed_LabellingMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      Outfeed_ContinueMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      Outfeed_BufferMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      GeneralError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      ConfigurationError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------                                                                                 
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	27/04/2023  | 0.1       | M. Diebel      | Coding Belt Modes Gate Alarm
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Infeed_LabellingMode
	    // Program Alarm Infeed_LabellingMode
	    #Infeed_LabellingMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Infeed_LabellingMode,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 2 - Infeed_ContinueMode
	    // Program Alarm Infeed_ContinueMode
	    #Infeed_ContinueMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Infeed_ContinueMode,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Infeed_BufferMode
	    // Program Alarm Infeed_BufferMode
	    #Infeed_BufferMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Infeed_BufferMode,
	                       TIMESTAMP := #Time,
	                       SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Outfeed_LabellingMode
	    // Program Alarm Outfeed_LabellingMode
	    #Outfeed_LabellingMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Outfeed_LabellingMode,
	                           TIMESTAMP := #Time,
	                           SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Outfeed_ContinueMode
	    // Program Alarm Outfeed_ContinueMode
	    #Outfeed_ContinueMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Outfeed_ContinueMode,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - Outfeed_BufferMode
	    // Program Alarm Outfeed_BufferMode
	    #Outfeed_BufferMode(SIG := #iq_UDT_CodingBeltModesStatus.Specific.Outfeed_BufferMode,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - GeneralError
	    // Program Alarm GeneralError
	    #GeneralError(SIG := #iq_UDT_CodingBeltModesStatus.Specific.GeneralError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - ConfigurationError
	    // Program Alarm ConfigurationError
	    #ConfigurationError(SIG := #iq_UDT_CodingBeltModesStatus.Specific.ConfigurationError,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_BiDirectional"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 167
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_BiDirectionalStatus : "UDT_BiDirectionalStatus";   // Status BiDirectional
   END_VAR

   VAR 
      InfeedModeRequested {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm infeed mode requested
      OutfeedModeRequested {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm outfeed mode requested
      InfeedModeActive {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm infeed mode active
      OutfeedModeActive {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm outfeed mode active
      InfeedModeReady {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm infeed mode ready
      OutfeedModeReady {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm outfeed mode ready
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2023   | 0.1       | R. Golonka      | BiDirectional Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	
	REGION 1 - Infeed mode requested 
	    //Program alarm infeed mode requested 
	    #InfeedModeRequested(SIG := #iq_UDT_BiDirectionalStatus.InfeedModeRequested,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Outfeed mode requested
	    //Program alarm outfeed mode requested
	    #OutfeedModeRequested(SIG := #iq_UDT_BiDirectionalStatus.OutfeedModeRequested,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Infeed mode active
	    //Program alarm infeed mode active
	    #InfeedModeActive(SIG := #iq_UDT_BiDirectionalStatus.InfeedModeActive,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Outfeed mode active
	    //Program alarm outfeed mode active
	    #OutfeedModeActive(SIG := #iq_UDT_BiDirectionalStatus.OutfeedModeActive,
	                       TIMESTAMP := #Time,
	                       SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Infeed mode ready
	    //Program alarm infeed mode ready
	    #InfeedModeReady(SIG := #iq_UDT_BiDirectionalStatus.InfeedModeReady,
	                     TIMESTAMP := #Time,
	                     SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - Outfeed mode ready
	    // Program alarm outfeed mode ready
	    #OutfeedModeReady(SIG := #iq_UDT_BiDirectionalStatus.OutfeedModeReady,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Connect"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 172
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_ConnectStatus : "UDT_ConnectStatus";   // Alarm
   END_VAR

   VAR 
      CommunicationFault {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm - Connection fault
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | Communication Program Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	REGION 1 - Internal Tracking Error
	    // Program Alarm TC IP Connection fault
	    #CommunicationFault(SIG := #iq_UDT_ConnectStatus.Specific.CommunicationFault,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Communication"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 171
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_TCIPConnectStatus : "UDT_TCPIPConnectStatusV2";   // Alarm
   END_VAR

   VAR 
      TCIPCommunicationFault {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm TC IP Connection fault
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | Communication Program Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	REGION 1 - Internal Tracking Error
	    // Program Alarm TC IP Connection fault
	    #TCIPCommunicationFault(SIG := #iq_UDT_TCIPConnectStatus.Specific.CommunicationFault,
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Caljan"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 168
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_CaljanStatus : "UDT_CaljanStatusV2";   // Caljan status
   END_VAR

   VAR 
      Jam {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Jam
      PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave not online
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave error
      PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave warning
      Disabled {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled
      VFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm VFD Error
      NotHealthy {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm not healthy
      StoreMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Info store mode
      RunMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Info run mode
      ChuteBlocked {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Info chute blocked
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Caljan Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Jam
	    //  Program Alarm Jam
	    #Jam(SIG := #iq_UDT_CaljanStatus.Specific.PEC_EoS.Jam,
	         TIMESTAMP := #Time,
	         SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Profinet slave not online
	    //  Program Alarm profinet slave not online
	    #PNSlaveNotOnline(SIG := #iq_UDT_CaljanStatus.Specific.PNSlaveNotOnline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Profinet slave error
	    //  Program Alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_CaljanStatus.Specific.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Profinet slave warning
	    //  Program Alarm profinet slave warning
	    #PNSlaveWarning(SIG := #iq_UDT_CaljanStatus.Specific.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	
	REGION 5 - Disabled
	    //  Program Alarm disabled
	    #Disabled(SIG := #iq_UDT_CaljanStatus.Specific.Disabled,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	
	REGION 6 - VFD Error
	    //  Program Alarm VFD error
	    #VFDError(SIG := #iq_UDT_CaljanStatus.Specific.VFDError,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - Not Healthy
	    //  Program Alarm nothealthy
	    #NotHealthy(SIG := #iq_UDT_CaljanStatus.Specific.NotHealthy,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - Store mode
	    //  Program info store mode
	    #StoreMode(SIG := #iq_UDT_CaljanStatus.Specific.StoreMode,
	               TIMESTAMP := #Time,
	               SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - Run mode
	    //  Program info run mode
	    #RunMode(SIG := #iq_UDT_CaljanStatus.Specific.RunMode,
	             TIMESTAMP := #Time,
	             SD_1 := #is_ID);
	END_REGION
	
	REGION 10 - Chute blocked
	    //  Program info chute blocked
	    #ChuteBlocked(SIG := #iq_UDT_CaljanStatus.Specific.ChuteBlocked,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_ConveyorInterface"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 173
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_Conveyor_Interface : "UDT_ConveyorInterface";   // Alarm
   END_VAR

   VAR 
      InternalTrackingError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Internal Tracking Error
      InternalTrackingWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Internal Tracking Warning
      Disconnected {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Disconected
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Conveyor Interface Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Internal Tracking Error
	    // Program Alarm Internal Tracking Error
	    #InternalTrackingError(SIG := #iq_UDT_Conveyor_Interface.InternalErrorTracking,
	                           TIMESTAMP := #Time,
	                           SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Internal Tracking Warning
	    // Program Alarm Internal Tracking Warning
	    #InternalTrackingWarning(SIG := #iq_UDT_Conveyor_Interface.InternalWarningTracking,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Disconeted
	    // Program Alarm Disconnected
	    #Disconnected(SIG := #iq_UDT_Conveyor_Interface.Disconnected,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_ColumnLift"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 170
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_ColumnLift : "UDT_ColumnLift_Status";   // Status column lift
   END_VAR

   VAR 
      ReferenceError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm reference error
      SwitchingTimerError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm switching timer error
      LimitSensorUpperPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit sensor upper position
      LimitSensorLowerPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit sensor lower position
      UpperPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm upper position error
      LowerPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm lower position error
      ChuteNotInPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm chute not in position error
      MaintenaceModeActive {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm maintenance mode is active
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	24/4/2023   | 0.1       | M. Diebel       | ColumnLift Alarm | DHL Munich 2023
	16/12/2023  | 0.2       | R. Golonka      | ColumnLift Alarm - added alarm No. 8
	13/3/2024   | 0.3       | S.Nieswiec      | Alligned for new baseline
	*)
	
	
	REGION 1 - ReferenceError
	    // Program Alarm ReferenceError
	    #ReferenceError(SIG := #iq_UDT_ColumnLift.Specific.ReferenceError,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - SwitchingTimeError
	    // Program Alarm SwitchingTimeError 
	    #SwitchingTimerError(SIG := #iq_UDT_ColumnLift.Specific.SwitchingTimerError,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - LimitSensorUpperposition
	    // Program Alarm LimitSensorUpperPosition 
	    #LimitSensorUpperPosition(SIG := #iq_UDT_ColumnLift.Specific.LimitSensorUpperPosition,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - LimitSensorLowerPosition
	    // Program Alarm LimitSensorLowerPosition 
	    #LimitSensorLowerPosition(SIG := #iq_UDT_ColumnLift.Specific.LimitSensorLowerPosition,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - UpperPosition
	    // Program Alarm UpperPosition 
	    #UpperPosition(SIG := #iq_UDT_ColumnLift.Specific.UpperPosition,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - LowerPosition
	    // Program Alarm LowerPosition 
	    #LowerPosition(SIG := #iq_UDT_ColumnLift.Specific.LowerPosition,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - ChuteNotlnPosition
	    // Program Alarm ChuteNotlnPosition 
	    #ChuteNotInPosition(SIG := #iq_UDT_ColumnLift.Specific.ChuteNotInPosition,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - Maintenance Mode Active
	    // Program Alarm maintenance mode active
	    #MaintenaceModeActive(SIG := #iq_UDT_ColumnLift.Specific.MaintenaceModeActive,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_MCP"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 181
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_MCPStatus : "UDT_MCPStatus";   // MCP Status
   END_VAR

   VAR 
      "PN-PN_PNSlaveNotOnline" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm  PNPN coupler is not online
      "PN-PN_PNSlaveError" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm PNPN coupler has an error
      "PN-PN_PNSlaveWarning" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm PNPN coupler has a warning
      IOModule_PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IO profinet slave not online
      IOModule_PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IO profinet slave error
      IOModule_PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IO profinet slave warning
      ScalanceSwitchPNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm scalance switch profinet slave not online
      ScalanceSwitchPNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm scalance switch profinet slave error
      ScalanceSwitchPNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm scalance switch profinet slave warning
      "2ndScalanceSwitchPNSlaveNotOnline" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 2nd scalance switch profinet slave not online
      "2ndScalanceSwitchPNSlaveError" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 2nd scalance switch profinet slave error
      "2ndScalanceSwitchPNSlaveWarning" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 2nd scalance switch profinet slave warning
      Singulator_PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm singulator profinet slave not online
      Singulator_PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm singulator profinet slave error
      Singulator_PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm singulator profinet slave warning
      IPC_PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IPC profinet slave not online
      IPC_PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IPC profinet slave error
      IPC_PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm IPC profinet slave warning
      UPSSwitchTripped {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm UPS switch tripped
      FireAlarmActive {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm fire alarm is active
      PS_201T1_Tripped {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm PS_201T1 tripped
      "230VAC_CB101F4Tripped" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 230VAC tripped 230VAC_CB101F4
      "230VAC_CB102F1Tripped" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 230VAC tripped 230VAC_C102F1
      "24VDC_CB201F1Tripped" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 24VDC tripped 24VDC_CB201F1
      "24VDC_CB205F5Tripped" {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm 24VDC tripped 24VDC_C205F5
      Spare_1 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm spare 1
      Spare_2 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm spare 2
      Spare_3 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm spare 3
      RackSlotError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Array[0..31] of Program_Alarm;   // Program alarm Rack slot error
      IOModuleSlotError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Array[0..31] of Program_Alarm;   // Program alarm IO module slot error
   END_VAR

   VAR_TEMP 
      ti_NrOfArrayEl : Int;   // Number of array element
      ti_ArraySize : Int;   // Array size
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | MCP Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	REGION 1- Profinet coupler slave not online
	    // Program Alarm PNPN coupler is not online
	    #"PN-PN_PNSlaveNotOnline"(SIG := #iq_UDT_MCPStatus.Specific.PN_PN_MSP_PNSlaveNotOnline,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Profinet coupler slave error
	    // Program Alarm PNPN coupler has an error
	    #"PN-PN_PNSlaveError"(SIG := #iq_UDT_MCPStatus.Specific.PN_PN_MSP_PNSlaveError,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Profinet coupler slave warning
	    // Program Alarm PNPN coupler has warning
	    #"PN-PN_PNSlaveWarning"(SIG := #iq_UDT_MCPStatus.Specific.PN_PN_MSP_PNSlaveWarning,
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Profinet slave not online
	    // Program Alarm IO profinet slave not online 
	    #IOModule_PNSlaveNotOnline(SIG := #iq_UDT_MCPStatus.Specific.IOModule_PNSlaveNotOnline,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Profinet slave error
	    // Program Alarm IO profinet slave error
	    #IOModule_PNSlaveError(SIG := #iq_UDT_MCPStatus.Specific.IOModule_PNSlaveError,
	                           TIMESTAMP := #Time,
	                           SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - Profinet slave warning
	    // Program Alarm IO profinet slave warning
	    #IOModule_PNSlaveWarning(SIG := #iq_UDT_MCPStatus.Specific.IOModule_PNSlaveWarning,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - Scalance switch Profinet slave not online
	    // Program Alarm scalance switch profinet slave not online 
	    #ScalanceSwitchPNSlaveNotOnline(SIG := #iq_UDT_MCPStatus.Specific.ScalanceSwitchPNSlaveNotOnline,
	                                    TIMESTAMP := #Time,
	                                    SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - Scalance switch Profinet slave error
	    // Program Alarm scalance switch profinet slave error
	    #ScalanceSwitchPNSlaveError(SIG := #iq_UDT_MCPStatus.Specific.ScalanceSwitchPNSlaveError,
	                                TIMESTAMP := #Time,
	                                SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - Scalance switch Profinet slave warning
	    // Program Alarm scalance switch profinet slave warning
	    #ScalanceSwitchPNSlaveWarning(SIG := #iq_UDT_MCPStatus.Specific.ScalanceSwitchPNSlaveWarning,
	                                  TIMESTAMP := #Time,
	                                  SD_1 := #is_ID);
	END_REGION
	
	REGION 10 - 2nd Scalance switch Profinet slave not online
	    // Program Alarm 2nd scalance switch profinet slave not online 
	    #"2ndScalanceSwitchPNSlaveNotOnline"(SIG := #iq_UDT_MCPStatus.Specific."2ndScalanceSwitchPNSlaveNotOnline",
	                                         TIMESTAMP := #Time,
	                                         SD_1 := #is_ID);
	END_REGION
	
	REGION 11 - 2nd Scalance switch Profinet slave error
	    // Program Alarm 2nd scalance switch profinet slave error
	    #"2ndScalanceSwitchPNSlaveError"(SIG := #iq_UDT_MCPStatus.Specific."2ndScalanceSwitchPNSlaveError",
	                                     TIMESTAMP := #Time,
	                                     SD_1 := #is_ID);
	END_REGION
	
	REGION 12 - 2nd Scalance switch Profinet slave warning
	    // Program Alarm 2nd scalance switch profinet slave warning
	    #"2ndScalanceSwitchPNSlaveWarning"(SIG := #iq_UDT_MCPStatus.Specific."2ndScalanceSwitchPNSlaveWarning",
	                                       TIMESTAMP := #Time,
	                                       SD_1 := #is_ID);
	END_REGION
	
	REGION 13 - Singulator Profinet slave not online
	    // Program Alarm singulator profinet slave not online 
	    #Singulator_PNSlaveNotOnline(SIG := #iq_UDT_MCPStatus.Specific.Singulator_PNSlaveNotOnline,
	                                 TIMESTAMP := #Time,
	                                 SD_1 := #is_ID);
	END_REGION
	
	REGION 14 - Singulator Profinet slave error
	    // Program Alarm singulator profinet slave error
	    #Singulator_PNSlaveError(SIG := #iq_UDT_MCPStatus.Specific.Singulator_PNSlaveError,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	REGION 15 - Singulator Profinet slave warning
	    // Program Alarm singulator profinet slave warning
	    #Singulator_PNSlaveWarning(SIG := #iq_UDT_MCPStatus.Specific.Singulator_PNSlaveWarning,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 16 - IPC Profinet slave not online
	    // Program Alarm IPC profinet slave not online 
	    #IPC_PNSlaveNotOnline(SIG := #iq_UDT_MCPStatus.Specific.IPC_PNSlaveNotOnline,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	END_REGION
	
	REGION 17 - IPC Profinet slave error
	    // Program Alarm IPC profinet slave error
	    #IPC_PNSlaveError(SIG := #iq_UDT_MCPStatus.Specific.IPC_PNSlaveError,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 18 - IPC Profinet slave warning
	    // Program Alarm IPC profinet slave warning
	    #IPC_PNSlaveWarning(SIG := #iq_UDT_MCPStatus.Specific.IPC_PNSlaveWarning,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
	
	REGION 19 - UPS Switch Tripped
	    // Program Alarm UPS switch tripped
	    #UPSSwitchTripped(SIG := #iq_UDT_MCPStatus.Specific.UPSSwitchTripped,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 20 - Fire alrm
	    // Program Alarm fire alarm
	    #FireAlarmActive(SIG := #iq_UDT_MCPStatus.Specific.FireAlarmActive,
	                     TIMESTAMP := #Time,
	                     SD_1 := #is_ID);
	END_REGION
	
	REGION 21 - PS_201T1 Tripped
	    // Program Alarm PS_201T1 tripped
	    #PS_201T1_Tripped(SIG := #iq_UDT_MCPStatus.Specific.PS_201T1_Tripped,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 22 - 230VAC_CB101F4 Tripped
	    // Program Alarm 230VAC tripped
	    #"230VAC_CB101F4Tripped"(SIG := #iq_UDT_MCPStatus.Specific."230VAC_CB101F4Tripped",
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	REGION 23 - 230VAC_C102F1 Tripped
	    // Program Alarm 230VAC tripped
	    #"230VAC_CB102F1Tripped"(SIG := #iq_UDT_MCPStatus.Specific."230VAC_CB102F1Tripped",
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	REGION 24 - 24VDC_CB201F1 Tripped
	    // Program Alarm 24VDC tripped
	    #"24VDC_CB201F1Tripped"(SIG := #iq_UDT_MCPStatus.Specific."24VDC_CB201F1Tripped",
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	END_REGION
	
	REGION 25 - 24VDC_C205F5 Tripped
	    // Program Alarm 24VDC tripped
	    #"24VDC_CB205F5Tripped"(SIG := #iq_UDT_MCPStatus.Specific."24VDC_CB205F5Tripped",
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	END_REGION
	
	REGION 26 - Spare 1
	    // Program Alarm spare 1
	    #Spare_1(SIG := #iq_UDT_MCPStatus.Specific.Spare_1,
	             TIMESTAMP := #Time,
	             SD_1 := #is_ID);
	END_REGION
	
	REGION 27 - Spare 2
	    // Program Alarm spare 2
	    #Spare_2(SIG := #iq_UDT_MCPStatus.Specific.Spare_2,
	             TIMESTAMP := #Time,
	             SD_1 := #is_ID);
	END_REGION
	
	REGION 28 - Spare 3
	    // Program Alarm spare 3
	    #Spare_3(SIG := #iq_UDT_MCPStatus.Specific.Spare_3,
	             TIMESTAMP := #Time,
	             SD_1 := #is_ID);
	END_REGION
	
	REGION 29 - Rack Slot Error
	    // Array size
	    #ti_ArraySize := "FC_GetNrOfArrayEl"(#iq_UDT_MCPStatus.Specific.RackSlotError);
	    
	    // Program alarm Rack slot error
	    FOR #ti_NrOfArrayEl := 0 TO (#ti_ArraySize - 1) DO
	        #RackSlotError[#ti_NrOfArrayEl](SIG := #iq_UDT_MCPStatus.Specific.RackSlotError[#ti_NrOfArrayEl],
	                                        TIMESTAMP := #Time,
	                                        SD_1 := #is_ID);
	    END_FOR;
	END_REGION
	
	REGION 30 - IO Module Slot Error
	    // Array size
	    #ti_ArraySize := "FC_GetNrOfArrayEl"(#iq_UDT_MCPStatus.Specific.IOModuleSlotError);
	    
	    // Program alarm IO module slot error
	    FOR #ti_NrOfArrayEl := 0 TO (#ti_ArraySize - 1) DO
	        #IOModuleSlotError[#ti_NrOfArrayEl](SIG := #iq_UDT_MCPStatus.Specific.IOModuleSlotError[#ti_NrOfArrayEl],
	                                            TIMESTAMP := #Time,
	                                            SD_1 := #is_ID);
	    END_FOR;
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Encoder"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 176
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_EncoderStatus : "UDT_EncoderStatusV2";   // Encoder status
   END_VAR

   VAR 
      InvalidValue {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm invalid value error
      RunningFeedbackError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm running feedback error
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	25/4/2022   | 1.0       | M. Diebel       | Encoder Alarm | DHL Munich 2023
	13/3/2024   | 1.1       | S.Nieswiec      | Alligned for new baseline
	*)
	
	
	REGION 1 - InvalidValue
	    //Program alarm invalid value error
	    #InvalidValue(SIG := #iq_UDT_EncoderStatus.InvalidValue,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - RunningFeedbackError
	    //Program alarm running feedback error
	    #RunningFeedbackError(SIG := #iq_UDT_EncoderStatus.RunningFeedbackError,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	    
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_VFD"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 194
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_VFD_Status : "UDT_VfdStatus";   // VFD Status
   END_VAR

   VAR 
      CommunicationErrorMovikit {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm communication error Movikit
      InternalVFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD error
      InternalVFDWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD Warning
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave error
      PNSlaveNotonline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave not online
      PNSlaveWarnnig {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD Warning
      VFDRunningFeedbackError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm VFD Feedback Error
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------    
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | VFD Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Communiation Error
	    // Program Alarm communication error Movikit
	    #CommunicationErrorMovikit(SIG := #iq_UDT_VFD_Status.CommunicationErrorMovikit,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Internal VFD Error
	    // Program Alarm internal VFD error
	    #InternalVFDError(SIG := #iq_UDT_VFD_Status.InternalError,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Internal VFD Warning
	    // Program Alarm internal VFD Warning
	    #InternalVFDWarning(SIG := #iq_UDT_VFD_Status.InternalWarning,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Profinet slave Error
	    // Program Alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_VFD_Status.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Profinet slave not online 
	    // Program Alarm profinet slave not online 
	    #PNSlaveNotonline(SIG := #iq_UDT_VFD_Status.PNSlaveNotonline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - Profinet slave Error
	    // Program Alarm internal VFD Error
	    #PNSlaveWarnnig(SIG := #iq_UDT_VFD_Status.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - VFD Feedback Error
	    // Program Alarm VFD Feedback Error
	    #VFDRunningFeedbackError(SIG := #iq_UDT_VFD_Status.VFDRunningFeedbackError,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_User"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 193
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      i_UDT_AlarmText { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "UDT_TP_UserAlarm";   // Alarm text
      ix_UserAlarm { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // User alamr
   END_VAR

   VAR 
      UserAlarm {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // User alarm 1
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------    
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	17/01/2024  | 0.1       | L.Klar          | Initial version
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- User alarm
	    
	    #UserAlarm(SIG := #ix_UserAlarm,
	               TIMESTAMP := #Time,
	               SD_1 := #i_UDT_AlarmText.Language1,
	               SD_2 := #i_UDT_AlarmText.Language2);
	    
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Unloader"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 192
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_UnloaderStatus : "UDT_UnloaderStatus";   // Unloader status
   END_VAR

   VAR 
      Jam {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm jam
      Disabled {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled
      TooLongParcel {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm too long parcel
      VFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm VFD Error
      NotHealthy {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm not healthy
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------      
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Unloader Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Jam
	    //  Program Alarm jam
	    #Jam(SIG := #iq_UDT_UnloaderStatus.Specific.PEC_EoS.Jam,
	         TIMESTAMP := #Time,
	         SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Disabled
	    //  Program Alarm disabled
	    #Disabled(SIG := #iq_UDT_UnloaderStatus.Specific.Disabled,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Too Long Parcel
	    //  Program Alarm too long parcel
	    #TooLongParcel(SIG := #iq_UDT_UnloaderStatus.Specific.TooLongParcel,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - VFD Error
	    //  Program Alarm VFD Error
	    #VFDError(SIG := #iq_UDT_UnloaderStatus.Specific.VFDError,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Not healthy
	    //  Program Alarm not healthy
	    #NotHealthy(SIG := #iq_UDT_UnloaderStatus.Specific.NotHealthy,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_RIO"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 191
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_RIOStatus : "UDT_RIOStatus";   // Rio Status
   END_VAR

   VAR 
      PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave not online
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave error
      ET200sp_ErrorModule {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Array[0..31] of Program_Alarm;   // Program alarm ET200sp module error
      PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave warning
   END_VAR

   VAR_TEMP 
      ti_NrOfArrayEl : Int;   // Number of array element
      ti_ArraySize : Int;   // Array size
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | RIO Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	REGION 1 - Profinet slave not online 
	    // Program alarm profinet slave not online 
	    #PNSlaveNotOnline(SIG := #iq_UDT_RIOStatus.Specific.PNSlaveNotOnline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Profinet slave error
	    // Program alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_RIOStatus.Specific.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Profinet slave warning
	    // Program alarm profinet slave warning
	    #PNSlaveWarning(SIG := #iq_UDT_RIOStatus.Specific.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - ET200SP module error
	    // Array size
	    #ti_ArraySize := "FC_GetNrOfArrayEl"(#iq_UDT_RIOStatus.Specific.ET200sp_ErrorModule);
	    
	    // Program alarm ET200SP module error
	    FOR #ti_NrOfArrayEl := 0 TO (#ti_ArraySize - 1) DO
	        #ET200sp_ErrorModule[#ti_NrOfArrayEl](SIG := #iq_UDT_RIOStatus.Specific.ET200sp_ErrorModule[#ti_NrOfArrayEl],
	                                              TIMESTAMP := #Time,
	                                              SD_1 := #is_ID);
	    END_FOR;
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_RetractableRoller"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 190
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_RetractableRollerStatus : "UDT_RetractrableRoller_Status";
   END_VAR

   VAR 
      NoHomePosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      RollerError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	09/05/2023   | 0.1       | M. Diebel       | ABSwitch Alarm | DHL Munich 2023
	13/3/2024    | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - NoHomePosition
	    //Program Alarm NoHomePosition
	    #NoHomePosition(SIG := #iq_UDT_RetractableRollerStatus.Specific.NoHomePosition,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - RollerError
	    //Program Alarm RollerError
	    #RollerError(SIG := #iq_UDT_RetractableRollerStatus.Specific.RollerError,
	                 TIMESTAMP := #Time,
	                 SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Rapiscan"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 189
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_RapiscanStatus : "UDT_RapiscanStatus";   // Rapiscan Status
   END_VAR

   VAR 
      XrayEnergised {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Xray energised error
      XrayFault {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Xray foult error
      XrayRdyRCV {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Xray ready recieve info
      XrayRdySend {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Xray ready send info
      BagScanning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm bag scanming info
      TransportMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm transport mode info
      BackBelt {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm backbelt info
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	25/4/2022   | 1.0       | M. Diebel       | Rapiscan Alarm | DHL Munich 2023
	13/3/2024   | 1.1       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - XrayEnergised
	    //Program Alarm Xray energised error
	    #XrayEnergised(SIG := #iq_UDT_RapiscanStatus.XraySpecific.XrayEnergised,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - XrayFault
	    //Program Alarm Xray foult error
	    #XrayFault(SIG := #iq_UDT_RapiscanStatus.XraySpecific.XrayFault,
	               TIMESTAMP := #Time,
	               SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - XrayRdyRCV
	    //Program Alarm Xray ready recieve info
	    #XrayRdyRCV(SIG := #iq_UDT_RapiscanStatus.XraySpecific.XrayRdyRCV,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - XrayRdySend
	    //Program Alarm Xray ready send info
	    #XrayRdySend(SIG := #iq_UDT_RapiscanStatus.XraySpecific.XrayRdySend,
	                 TIMESTAMP := #Time,
	                 SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - BagScanning
	    //Program Alarm bag scanming info
	    #BagScanning(SIG := #iq_UDT_RapiscanStatus.XraySpecific.BagScanning,
	                 TIMESTAMP := #Time,
	                 SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - TransportMode
	    //Program Alarm transport mode info
	    #TransportMode(SIG := #iq_UDT_RapiscanStatus.XraySpecific.TransportMode,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - BackBelt
	    //Program Alarm backbelt info
	    #BackBelt(SIG := #iq_UDT_RapiscanStatus.XraySpecific.BackBelt,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_PNNode"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 188
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_PNNode_Status : "UDT_PNNodeStatus";   // PNNode Status
   END_VAR

   VAR 
      PNSlaveNotOnline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave net online
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave error
      PNSlaveWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm profinet slave warning
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | PN Node Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Profinet slave not online
	    // Program Alarm profinet slave not online 
	    #PNSlaveNotOnline(SIG := #iq_UDT_PNNode_Status.Specific.PNSlaveNotOnline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Profinet slave error
	    // Program Alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_PNNode_Status.Specific.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Profinet slave warning
	    // Program Alarm profinet slave warning
	    #PNSlaveWarning(SIG := #iq_UDT_PNNode_Status.Specific.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_PECUpdate"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 187
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_PECUpdate_Status : "UDT_PECUpdateStatus";   // PEC Update Status
   END_VAR

   VAR 
      Jam {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Jam
      TooManyLost {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Too many losy
      LowPerformance {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Low performance
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------   
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | PEC Update Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Jam
	    // Program Alarm Jam
	    #Jam(SIG := #iq_UDT_PECUpdate_Status.Jam,
	         TIMESTAMP := #Time,
	         SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Too many lost
	    // Program Alarm Too many losy
	    #TooManyLost(SIG := #iq_UDT_PECUpdate_Status.TooManyLost,
	                 TIMESTAMP := #Time,
	                 SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Low Performance
	    // Program Alarm Low performance
	    #LowPerformance(SIG := #iq_UDT_PECUpdate_Status.LowPerformance,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_PEC"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 186
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_PEC_Status : "UDT_PECStatus";   // PEC Status
   END_VAR

   VAR 
      Jam {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Jam
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | PEC Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Jam
	    // Program Alarm Jam
	    #Jam(SIG := #iq_UDT_PEC_Status.Jam,
	         TIMESTAMP := #Time,
	         SD_1 := #is_ID);
	END_REGION
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_PDP"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 185
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_PDPStatus : "UDT_PDPStatus";   // PDP Status
   END_VAR

   VAR 
      CircuitBreakersTripped {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerStateF100_F200_F300 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers state
      CircuitBreakerStatePM {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers state PM
      CircuitBreakerTrippedF101 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF102 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF103 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF104 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF105 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF106 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF107 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF108 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF109 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF110 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF111 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF112 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF113 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF114 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF115 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF116 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF117 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF118 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF119 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF120 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF121 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF122 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF123 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF124 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF125 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF126 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF127 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF128 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF129 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF130 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF131 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF132 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF133 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF134 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF135 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF201 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF202 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF203 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF204 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF205 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF206 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF207 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF208 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF209 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF210 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF211 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF212 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF213 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF214 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF215 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF216 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF217 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF218 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF219 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF220 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF221 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF222 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF223 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF224 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF225 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF226 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF227 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF228 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF229 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF501 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF502 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF503 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF504 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF505 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF506 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF507 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF508 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF509 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF510 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF511 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
      CircuitBreakerTrippedF512 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm circuit breakers tripped
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	24/04/2022   | 0.1       | M.Diebel       | PDP Alarm | DHL Munich 2023
	24/07/2023   | 0.2       | R.Golonka      | PDP Alarm update F130-F135
	13/3/2024    | 0.3       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Circuit breakers tripped
	    //Program alarm circuit breakers tripped
	    #CircuitBreakersTripped(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakersTripped,
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	END_REGION
	
	
	REGION 2 - CircuitBreakerState F100_F200_F300
	    //Program alarm Circuit Breaker State F100 F200 F300
	    #CircuitBreakerStateF100_F200_F300(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerStateF100_F200_F300,
	                                       TIMESTAMP := #Time,
	                                       SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - CircuitBreakerStatPM
	    //Program alarm Circuit Breaker Stat PM
	    #CircuitBreakerStatePM(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerStatePM,
	                           TIMESTAMP := #Time,
	                           SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - CircuitBreakerTrippedF101
	    //Program alarm Circuit Breaker Tripped F101
	    #CircuitBreakerTrippedF101(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF101,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - CircuitBreakerTrippedF102
	    //Program alarm Circuit Breaker Tripped F102
	    #CircuitBreakerTrippedF102(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF102,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - CircuitBreakerTrippedF103
	    //Program alarm Circuit Breaker Tripped F103
	    #CircuitBreakerTrippedF103(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF103,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - CircuitBreakerTrippedF104
	    //Program alarm Circuit Breaker Tripped F104
	    #CircuitBreakerTrippedF104(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF104,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - CircuitBreakerTrippedF105
	    //Program alarm Circuit Breaker Tripped F105
	    #CircuitBreakerTrippedF105(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF105,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - CircuitBreakerTrippedF106
	    //Program alarm Circuit Breaker Tripped F106
	    #CircuitBreakerTrippedF106(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF106,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 10 - CircuitBreakerTrippedF107
	    //Program alarm Circuit Breaker Tripped F107
	    #CircuitBreakerTrippedF107(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF107,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 11 - CircuitBreakerTrippedF108
	    //Program alarm Circuit Breaker Tripped F108
	    #CircuitBreakerTrippedF108(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF108,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 12 - CircuitBreakerTrippedF109
	    //Program alarm Circuit Breaker Tripped F109
	    #CircuitBreakerTrippedF109(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF109,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 13 - CircuitBreakerTrippedF110
	    //Program alarm Circuit Breaker Tripped F110
	    #CircuitBreakerTrippedF110(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF110,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 14 - CircuitBreakerTrippedF111
	    //Program alarm Circuit Breaker Tripped F111
	    #CircuitBreakerTrippedF111(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF111,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 15 - CircuitBreakerTrippedF112
	    //Program alarm Circuit Breaker Tripped F112
	    #CircuitBreakerTrippedF112(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF112,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 16 - CircuitBreakerTrippedF113
	    //Program alarm Circuit Breaker Tripped F113
	    #CircuitBreakerTrippedF113(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF113,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 17 - CircuitBreakerTrippedF114
	    //Program alarm Circuit Breaker Tripped F114
	    #CircuitBreakerTrippedF114(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF114,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 18 - CircuitBreakerTrippedF115
	    //Program alarm Circuit Breaker Tripped F115
	    #CircuitBreakerTrippedF115(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF115,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 19 - CircuitBreakerTrippedF116
	    //Program alarm Circuit Breaker Tripped F116
	    #CircuitBreakerTrippedF116(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF116,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 20 - CircuitBreakerTrippedF117
	    //Program alarm Circuit Breaker Tripped F117
	    #CircuitBreakerTrippedF117(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF117,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 21 - CircuitBreakerTrippedF118
	    //Program alarm Circuit Breaker Tripped F118
	    #CircuitBreakerTrippedF118(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF118,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 22 - CircuitBreakerTrippedF119
	    //Program alarm Circuit Breaker Tripped F119
	    #CircuitBreakerTrippedF119(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF119,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 23 - CircuitBreakerTrippedF120
	    //Program alarm Circuit Breaker Tripped F120
	    #CircuitBreakerTrippedF120(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF120,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 24 - CircuitBreakerTrippedF121
	    //Program alarm Circuit Breaker Tripped F121
	    #CircuitBreakerTrippedF121(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF121,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 25 - CircuitBreakerTrippedF122
	    //Program alarm Circuit Breaker Tripped F122
	    #CircuitBreakerTrippedF122(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF122,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 26 - CircuitBreakerTrippedF123
	    //Program alarm Circuit Breaker Tripped F123
	    #CircuitBreakerTrippedF123(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF123,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 27 - CircuitBreakerTrippedF124
	    //Program alarm Circuit Breaker Tripped F124
	    #CircuitBreakerTrippedF124(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF124,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 28 - CircuitBreakerTrippedF125
	    //Program alarm Circuit Breaker Tripped F125
	    #CircuitBreakerTrippedF125(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF125,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 29 - CircuitBreakerTrippedF126
	    //Program alarm Circuit Breaker Tripped F126
	    #CircuitBreakerTrippedF126(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF126,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 30 - CircuitBreakerTrippedF127
	    //Program alarm Circuit Breaker Tripped F127
	    #CircuitBreakerTrippedF127(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF127,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 31 - CircuitBreakerTrippedF128
	    //Program alarm Circuit Breaker Tripped F128
	    #CircuitBreakerTrippedF128(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF128,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 32 - CircuitBreakerTrippedF129
	    //Program alarm Circuit Breaker Tripped F129
	    #CircuitBreakerTrippedF129(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF129,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 33 - CircuitBreakerTrippedF201
	    //Program alarm Circuit Breaker Tripped F201
	    #CircuitBreakerTrippedF201(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF201,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 34 - CircuitBreakerTrippedF202
	    //Program alarm Circuit Breaker Tripped F102
	    #CircuitBreakerTrippedF202(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF202,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 35 - CircuitBreakerTrippedF203
	    //Program alarm Circuit Breaker Tripped F203
	    #CircuitBreakerTrippedF203(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF203,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 36 - CircuitBreakerTripped2104
	    //Program alarm Circuit Breaker Tripped F204
	    #CircuitBreakerTrippedF204(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF204,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 37 - CircuitBreakerTrippedF205
	    //Program alarm Circuit Breaker Tripped F205
	    #CircuitBreakerTrippedF205(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF205,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 38 - CircuitBreakerTrippedF206
	    //Program alarm Circuit Breaker Tripped F206
	    #CircuitBreakerTrippedF206(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF206,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 39 - CircuitBreakerTrippedF207
	    //Program alarm Circuit Breaker Tripped F207
	    #CircuitBreakerTrippedF207(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF207,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 40 - CircuitBreakerTrippedF208
	    //Program alarm Circuit Breaker Tripped F208
	    #CircuitBreakerTrippedF208(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF208,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 41 - CircuitBreakerTrippedF209
	    //Program alarm Circuit Breaker Tripped F209
	    #CircuitBreakerTrippedF209(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF209,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 42 - CircuitBreakerTrippedF210
	    //Program alarm Circuit Breaker Tripped F210
	    #CircuitBreakerTrippedF210(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF210,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 43 - CircuitBreakerTrippedF211
	    //Program alarm Circuit Breaker Tripped F211
	    #CircuitBreakerTrippedF211(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF211,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 44 - CircuitBreakerTrippedF212
	    //Program alarm Circuit Breaker Tripped F212
	    #CircuitBreakerTrippedF212(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF212,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 45 - CircuitBreakerTrippedF213
	    //Program alarm Circuit Breaker Tripped F213
	    #CircuitBreakerTrippedF213(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF213,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 46 - CircuitBreakerTrippedF214
	    //Program alarm Circuit Breaker Tripped F214
	    #CircuitBreakerTrippedF214(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF214,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 47 - CircuitBreakerTrippedF215
	    //Program alarm Circuit Breaker Tripped F215
	    #CircuitBreakerTrippedF215(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF215,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 48 - CircuitBreakerTrippedF216
	    //Program alarm Circuit Breaker Tripped F216
	    #CircuitBreakerTrippedF216(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF216,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 49 - CircuitBreakerTrippedF217
	    //Program alarm Circuit Breaker Tripped F217
	    #CircuitBreakerTrippedF217(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF217,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 50 - CircuitBreakerTrippedF218
	    //Program alarm Circuit Breaker Tripped F218
	    #CircuitBreakerTrippedF218(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF218,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 51 - CircuitBreakerTrippedF219
	    //Program alarm Circuit Breaker Tripped F219
	    #CircuitBreakerTrippedF219(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF219,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 52 - CircuitBreakerTrippedF220
	    //Program alarm Circuit Breaker Tripped F220
	    #CircuitBreakerTrippedF220(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF220,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 53 - CircuitBreakerTrippedF121
	    //Program alarm Circuit Breaker Tripped F221
	    #CircuitBreakerTrippedF221(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF221,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 54 - CircuitBreakerTrippedF222
	    //Program alarm Circuit Breaker Tripped F222
	    #CircuitBreakerTrippedF222(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF222,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 55 - CircuitBreakerTrippedF223
	    //Program alarm Circuit Breaker Tripped F223
	    #CircuitBreakerTrippedF223(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF223,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 56 - CircuitBreakerTrippedF224
	    //Program alarm Circuit Breaker Tripped F224
	    #CircuitBreakerTrippedF224(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF224,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 57 - CircuitBreakerTrippedF225
	    //Program alarm Circuit Breaker Tripped F225
	    #CircuitBreakerTrippedF225(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF225,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 58 - CircuitBreakerTrippedF226
	    //Program alarm Circuit Breaker Tripped F226
	    #CircuitBreakerTrippedF226(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF226,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 59 - CircuitBreakerTrippedF227
	    //Program alarm Circuit Breaker Tripped F227
	    #CircuitBreakerTrippedF227(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF227,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 60 - CircuitBreakerTrippedF228
	    //Program alarm Circuit Breaker Tripped F228
	    #CircuitBreakerTrippedF228(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF228,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 61 - CircuitBreakerTrippedF229
	    //Program alarm Circuit Breaker Tripped F229
	    #CircuitBreakerTrippedF229(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF229,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 62 - CircuitBreakerTrippedF501
	    //Program alarm Circuit Breaker Tripped F501
	    #CircuitBreakerTrippedF501(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF501,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 63 - CircuitBreakerTrippedF502
	    //Program alarm Circuit Breaker Tripped F502
	    #CircuitBreakerTrippedF502(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF502,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 64 - CircuitBreakerTrippedF503
	    //Program alarm Circuit Breaker Tripped F503
	    #CircuitBreakerTrippedF503(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF503,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 65 - CircuitBreakerTripped504
	    //Program alarm Circuit Breaker Tripped F504
	    #CircuitBreakerTrippedF504(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF504,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 66 - CircuitBreakerTrippedF505
	    //Program alarm Circuit Breaker Tripped F505
	    #CircuitBreakerTrippedF505(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF505,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 67 - CircuitBreakerTrippedF506
	    //Program alarm Circuit Breaker Tripped F506
	    #CircuitBreakerTrippedF506(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF506,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 68 - CircuitBreakerTrippedF507
	    //Program alarm Circuit Breaker Tripped F507
	    #CircuitBreakerTrippedF507(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF507,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 69 - CircuitBreakerTrippedF508
	    //Program alarm Circuit Breaker Tripped F508
	    #CircuitBreakerTrippedF508(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF508,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 70 - CircuitBreakerTrippedF509
	    //Program alarm Circuit Breaker Tripped F509
	    #CircuitBreakerTrippedF509(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF509,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 71 - CircuitBreakerTrippedF510
	    //Program alarm Circuit Breaker Tripped F510
	    #CircuitBreakerTrippedF510(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF510,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 72 - CircuitBreakerTrippedF511
	    //Program alarm Circuit Breaker Tripped F511
	    #CircuitBreakerTrippedF511(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF511,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 73 - CircuitBreakerTrippedF512
	    //Program alarm Circuit Breaker Tripped F512
	    #CircuitBreakerTrippedF512(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF512,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 74 - CircuitBreakerTrippedF130
	    //Program alarm Circuit Breaker Tripped F130
	    #CircuitBreakerTrippedF130(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF130,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 75 - CircuitBreakerTrippedF131
	    //Program alarm Circuit Breaker Tripped F131
	    #CircuitBreakerTrippedF131(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF131,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 76 - CircuitBreakerTrippedF132
	    //Program alarm Circuit Breaker Tripped F132
	    #CircuitBreakerTrippedF132(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF132,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 77 - CircuitBreakerTrippedF133
	    //Program alarm Circuit Breaker Tripped F133
	    #CircuitBreakerTrippedF133(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF133,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 78 - CircuitBreakerTrippedF134
	    //Program alarm Circuit Breaker Tripped F134
	    #CircuitBreakerTrippedF134(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF134,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 79 - CircuitBreakerTrippedF135
	    //Program alarm Circuit Breaker Tripped F135
	    #CircuitBreakerTrippedF135(SIG := #iq_UDT_PDPStatus.Specific.CircuitBreakerTrippedF135,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Outfeed2States"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 184
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_Outfeed2StatesStatus : "UDT_Outfeed2StatesStatus";   // Outfeed2states status
   END_VAR

   VAR 
      ChuteFull {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Chute Full
      ChuteHalfFull {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Chute Half Full
      ChuteDisabled {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Chute Disabled
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Outfeed2States Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Chute Full
	    //  Program Alarm Chute full 
	    #ChuteFull(SIG := #iq_UDT_Outfeed2StatesStatus.Specific.ChuteFull,
	               TIMESTAMP := #Time,
	               SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Chute Half Full
	    //  Program Alarm chute half full
	    #ChuteHalfFull(SIG := #iq_UDT_Outfeed2StatesStatus.Specific.ChuteHalfFull,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Chute Disabled
	    //  Program Alarm chute disabled
	    #ChuteDisabled(SIG := #iq_UDT_Outfeed2StatesStatus.Specific.ChuteDisabled,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_NORD_VFD"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 183
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
      i_UDT_TP_Interface { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "UDT_TPInterfaceV2";   // HMI Interface
   END_VAR

   VAR_IN_OUT 
      iq_UDT_VFD_Status : "UDT_VfdStatus";   // VFD status
   END_VAR

   VAR 
      CommunicationErrorMovikit {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm communication error Movikit
      InternalVFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD error
      InternalVFDWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD Warning
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave error
      PNSlaveNotonline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave not online
      PNSlaveWarnnig {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal VFD Warning
      VFDRunningFeedbackError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm VFD Feedback Error
      sx_AlarmCodeChange { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Alarm error code change trigger
      si_PreviousErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Previous error code
      sx_InternalErrorTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Internal error trigger
      sx_InternalWarningTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Internal warning trigger
      ss_ErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // Nord error code number
      si_ErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
   END_VAR

   VAR_TEMP 
      ts_ErrorText : String;   // Temp. Error text
      ts_ErrorTextGerman : String;   // Temp. german error text
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------       
	                                                                                      
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | VFD NORD Alarm | DHL Munich 2023
	30/01/2023  | 0.2       | R. Golonka      | VFD NORD error code 
	                                          | need to be genereted in both language on the trigger <--------- !!!
	13/3/2024   | 0.3       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Communiation Error
	    // Program Alarm communication error Movikit
	    #CommunicationErrorMovikit(SIG := #iq_UDT_VFD_Status.CommunicationErrorMovikit,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Alarm change trigger 
	    // Alarm change 
	    #sx_AlarmCodeChange := (#si_PreviousErrorCode <> #iq_UDT_VFD_Status.ErrorCode);
	    // Previous alarm change 
	    #si_PreviousErrorCode := #iq_UDT_VFD_Status.ErrorCode;
	    // Internal error trigger 
	    #sx_InternalErrorTrigger := NOT #sx_AlarmCodeChange AND #iq_UDT_VFD_Status.InternalError;
	    // Internal warning trigger 
	    #sx_InternalWarningTrigger := NOT #sx_AlarmCodeChange AND #iq_UDT_VFD_Status.InternalWarning;
	    
	END_REGION
	
	REGION 4 - Error code with sub error code
	    
	    #si_ErrorCode := (#iq_UDT_VFD_Status.ErrorCode * 10) + #iq_UDT_VFD_Status.SubErrorCode;
	    
	END_REGION
	
	REGION 3- Error code to floating point string
	    // Nord system error code (like in Nord drive manual)
	    #ss_ErrorCode := '';
	    VAL_STRG(IN := #si_ErrorCode,
	             SIZE := 0,
	             PREC := 1,
	             FORMAT := 0,
	             P := 1,
	             OUT => #ss_ErrorCode);
	END_REGION
	
	REGION 4 - Eror text english 
	    
	    // Clear temporary string
	    #ts_ErrorText := '';
	    
	    // Posibly error code
	    IF #sx_InternalErrorTrigger OR #sx_InternalWarningTrigger THEN
	        CASE #si_ErrorCode OF
	                // Error code to string code
	            10:
	                #ts_ErrorText := CONCAT(IN1 := 'Inverter overtemperature, error code: ', IN2 := #ss_ErrorCode);
	            11:
	                #ts_ErrorText := CONCAT(IN1 := 'Internal FI overtemperature, error code: ', IN2 := #ss_ErrorCode);
	            20:
	                #ts_ErrorText := CONCAT(IN1 := 'Motor overtemp.PTC, error code: ', IN2 := #ss_ErrorCode);
	            21:
	                #ts_ErrorText := CONCAT(IN1 := 'Motor overtemp.I²t, error code: ', IN2 := #ss_ErrorCode);
	            22:
	                #ts_ErrorText := CONCAT(IN1 := 'Ext Resistor Temp, error code: ', IN2 := #ss_ErrorCode);
	            30:
	                #ts_ErrorText := CONCAT(IN1 := 'Overcurrent I²t-Lim., error code: ', IN2 := #ss_ErrorCode);
	            31:
	                #ts_ErrorText := CONCAT(IN1 := 'Overcurrent Chopper, error code: ', IN2 := #ss_ErrorCode);
	            32:
	                #ts_ErrorText := CONCAT(IN1 := 'Overcurrent IGBT, error code: ', IN2 := #ss_ErrorCode);
	            33:
	                #ts_ErrorText := CONCAT(IN1 := 'Overcurrent IGBTfast, error code: ', IN2 := #ss_ErrorCode);
	            40:
	                #ts_ErrorText := CONCAT(IN1 := 'Module overcurrent, error code: ', IN2 := #ss_ErrorCode);
	            41:
	                #ts_ErrorText := CONCAT(IN1 := 'Overcurrent measurem, error code: ', IN2 := #ss_ErrorCode);
	            50:
	                #ts_ErrorText := CONCAT(IN1 := 'Overvoltage Ud, error code: ', IN2 := #ss_ErrorCode);
	            51:
	                #ts_ErrorText := CONCAT(IN1 := 'Mains overvoltage, error code: ', IN2 := #ss_ErrorCode);
	            60:
	                #ts_ErrorText := CONCAT(IN1 := 'Charging error, error code: ', IN2 := #ss_ErrorCode);
	            61:
	                #ts_ErrorText := CONCAT(IN1 := 'Mains low voltage, error code: ', IN2 := #ss_ErrorCode);
	            70:
	                #ts_ErrorText := CONCAT(IN1 := 'Mains Phase Failure, error code: ', IN2 := #ss_ErrorCode);
	            71:
	                #ts_ErrorText := CONCAT(IN1 := 'Phasefailure dc-link, error code: ', IN2 := #ss_ErrorCode);
	            80:
	                #ts_ErrorText := CONCAT(IN1 := 'Parameter lost, error code: ', IN2 := #ss_ErrorCode);
	            81:
	                #ts_ErrorText := CONCAT(IN1 := 'Inverter ID error, error code: ', IN2 := #ss_ErrorCode);
	            82:
	                #ts_ErrorText := CONCAT(IN1 := 'Reserved, error code: ', IN2 := #ss_ErrorCode);
	            83:
	                #ts_ErrorText := CONCAT(IN1 := 'Extern. EEPROM error, error code: ', IN2 := #ss_ErrorCode);
	            84:
	                #ts_ErrorText := CONCAT(IN1 := 'EEPROM intern. error, error code: ', IN2 := #ss_ErrorCode);
	            87:
	                #ts_ErrorText := CONCAT(IN1 := 'EEPROM copy differs, error code: ', IN2 := #ss_ErrorCode);
	            100:
	                #ts_ErrorText := CONCAT(IN1 := 'Bus time-out, error code: ', IN2 := #ss_ErrorCode);
	            101:
	                #ts_ErrorText := CONCAT(IN1 := 'System-error option, error code: ', IN2 := #ss_ErrorCode);
	            102:
	                #ts_ErrorText := CONCAT(IN1 := 'Bus time-out option, error code: ', IN2 := #ss_ErrorCode);
	            103:
	                #ts_ErrorText := CONCAT(IN1 := 'System-error option, error code: ', IN2 := #ss_ErrorCode);
	            104:
	                #ts_ErrorText := CONCAT(IN1 := 'Init-error option, error code: ', IN2 := #ss_ErrorCode);
	            105:
	                #ts_ErrorText := CONCAT(IN1 := 'System-error option, error code: ', IN2 := #ss_ErrorCode);
	            106:
	                #ts_ErrorText := CONCAT(IN1 := 'System-error option, error code: ', IN2 := #ss_ErrorCode);
	            107:
	                #ts_ErrorText := CONCAT(IN1 := 'System-error option, error code: ', IN2 := #ss_ErrorCode);
	            109:
	                #ts_ErrorText := CONCAT(IN1 := 'Missing Option /P120, error code: ', IN2 := #ss_ErrorCode);
	            110:
	                #ts_ErrorText := CONCAT(IN1 := 'Control terminals, error code: ', IN2 := #ss_ErrorCode);
	            120:
	                #ts_ErrorText := CONCAT(IN1 := 'External Watchdog, error code: ', IN2 := #ss_ErrorCode);
	            121:
	                #ts_ErrorText := CONCAT(IN1 := 'Limit moto./Customer, error code: ', IN2 := #ss_ErrorCode);
	            122:
	                #ts_ErrorText := CONCAT(IN1 := 'Limit gen., error code: ', IN2 := #ss_ErrorCode);
	            123:
	                #ts_ErrorText := CONCAT(IN1 := 'Torque Limit, error code: ', IN2 := #ss_ErrorCode);
	            124:
	                #ts_ErrorText := CONCAT(IN1 := 'Current limit, error code: ', IN2 := #ss_ErrorCode);
	            125:
	                #ts_ErrorText := CONCAT(IN1 := 'Load monitor, error code: ', IN2 := #ss_ErrorCode);
	            128:
	                #ts_ErrorText := CONCAT(IN1 := 'AI minimum, error code: ', IN2 := #ss_ErrorCode);
	            129:
	                #ts_ErrorText := CONCAT(IN1 := 'AI maximum, error code: ', IN2 := #ss_ErrorCode);
	            130:
	                #ts_ErrorText := CONCAT(IN1 := 'Encoder error, error code: ', IN2 := #ss_ErrorCode);
	            131:
	                #ts_ErrorText := CONCAT(IN1 := 'Speed slip error, error code: ', IN2 := #ss_ErrorCode);
	            132:
	                #ts_ErrorText := CONCAT(IN1 := 'Disconnect. control, error code: ', IN2 := #ss_ErrorCode);
	            160:
	                #ts_ErrorText := CONCAT(IN1 := 'Motor Phase Failure, error code: ', IN2 := #ss_ErrorCode);
	            161:
	                #ts_ErrorText := CONCAT(IN1 := 'Magn. Current Watch, error code: ', IN2 := #ss_ErrorCode);
	            180:
	                #ts_ErrorText := CONCAT(IN1 := 'Safety circuit, error code: ', IN2 := #ss_ErrorCode);
	            190:
	                #ts_ErrorText := CONCAT(IN1 := 'Parameter ident., error code: ', IN2 := #ss_ErrorCode);
	            191:
	                #ts_ErrorText := CONCAT(IN1 := 'Star Delta incorrect, error code: ', IN2 := #ss_ErrorCode);
	            200:
	                #ts_ErrorText := CONCAT(IN1 := 'Reserved, error code: ', IN2 := #ss_ErrorCode);
	            201:
	                #ts_ErrorText := CONCAT(IN1 := 'Watchdog, error code: ', IN2 := #ss_ErrorCode);
	            202:
	                #ts_ErrorText := CONCAT(IN1 := 'Stack overflow, error code: ', IN2 := #ss_ErrorCode);
	            203:
	                #ts_ErrorText := CONCAT(IN1 := 'Stack underflow, error code: ', IN2 := #ss_ErrorCode);
	            204:
	                #ts_ErrorText := CONCAT(IN1 := 'Undefined opcode, error code: ', IN2 := #ss_ErrorCode);
	            205:
	                #ts_ErrorText := CONCAT(IN1 := 'Protected Instruct., error code: ', IN2 := #ss_ErrorCode);
	            206:
	                #ts_ErrorText := CONCAT(IN1 := 'Illegal word Access, error code: ', IN2 := #ss_ErrorCode);
	            207:
	                #ts_ErrorText := CONCAT(IN1 := 'Illegal inst. Acces, error code: ', IN2 := #ss_ErrorCode);
	            208:
	                #ts_ErrorText := CONCAT(IN1 := 'Program memory error, error code: ', IN2 := #ss_ErrorCode);
	            209:
	                #ts_ErrorText := CONCAT(IN1 := 'Dual-ported RAM, error code: ', IN2 := #ss_ErrorCode);
	            210:
	                #ts_ErrorText := CONCAT(IN1 := 'NMI error, error code: ', IN2 := #ss_ErrorCode);
	            211:
	                #ts_ErrorText := CONCAT(IN1 := 'PLL error, error code: ', IN2 := #ss_ErrorCode);
	            212:
	                #ts_ErrorText := CONCAT(IN1 := 'ADU error, error code: ', IN2 := #ss_ErrorCode);
	            213:
	                #ts_ErrorText := CONCAT(IN1 := 'PMI error, error code: ', IN2 := #ss_ErrorCode);
	            214:
	                #ts_ErrorText := CONCAT(IN1 := 'Userstack overflow, error code: ', IN2 := #ss_ErrorCode);
	            ELSE  // Unknow alarm code
	                #ts_ErrorText := CONCAT(IN1 := 'Alarm unknown, error code: ', IN2 := (#ss_ErrorCode));
	        END_CASE;
	    ELSE
	        #ts_ErrorText := 'Alarm code change';
	    END_IF;
	    
	    // Write error code
	    IF #sx_InternalErrorTrigger THEN
	        #ts_ErrorText := CONCAT(IN1 := #is_ID, IN2 := ' NORD VFD has internal error:', IN3 := #ts_ErrorText);
	    END_IF;
	    
	    IF #sx_InternalWarningTrigger THEN
	        #ts_ErrorText := CONCAT(IN1 := #is_ID, IN2 := ' NORD VFD has internal warning:', IN3 := #ts_ErrorText);
	    END_IF;
	    
	END_REGION
	
	REGION 5 - Error text german
	    
	    // Clear temorary string 
	    #ts_ErrorTextGerman := '';
	    
	    // Possibly error code
	    IF #sx_InternalErrorTrigger OR #sx_InternalWarningTrigger THEN
	        CASE #si_ErrorCode OF
	                // Error code to string code         
	            10:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Übertemperatur Umrichter, AlarmCode: ', IN2 := #ss_ErrorCode);
	            11:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Übertemperatur FU intern, AlarmCode: ', IN2 := #ss_ErrorCode);
	            20:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Übertemperatur Motor PTC, AlarmCode: ', IN2 := #ss_ErrorCode);
	            21:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Übertemperatur Motor I²t, AlarmCode: ', IN2 := #ss_ErrorCode);
	            22:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Übertemperatur Bremswiderstand extern, AlarmCode: ', IN2 := #ss_ErrorCode);
	            30:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom I2t Grenze, AlarmCode: ', IN2 := #ss_ErrorCode);
	            31:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom Chopper , AlarmCode: ', IN2 := #ss_ErrorCode);
	            32:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom IGBT, AlarmCode: ', IN2 := #ss_ErrorCode);
	            33:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom IGBT flink, AlarmCode: ', IN2 := #ss_ErrorCode);
	            40:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom Modul, AlarmCode: ', IN2 := #ss_ErrorCode);
	            41:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überstrom Strommessung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            50:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überspannung UZW, AlarmCode: ', IN2 := #ss_ErrorCode);
	            51:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überspannung Netz, AlarmCode: ', IN2 := #ss_ErrorCode);
	            60:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Aufladefehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            61:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Unterspannung Netz, AlarmCode: ', IN2 := #ss_ErrorCode);
	            70:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Phasenfehler Netz, AlarmCode: ', IN2 := #ss_ErrorCode);
	            71:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Phasenfehler UZW, AlarmCode: ', IN2 := #ss_ErrorCode);
	            80:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'EEPROM - Maximalwert überschritten, AlarmCode: ', IN2 := #ss_ErrorCode);
	            81:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Umrichtertyp falsch, AlarmCode: ', IN2 := #ss_ErrorCode);
	            82:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'reserviert, AlarmCode: ', IN2 := #ss_ErrorCode);
	            83:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'EEPROM KSE Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            84:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'EEPROM interner Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            87:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'EEPR Kopie ungleich, AlarmCode: ', IN2 := #ss_ErrorCode);
	            100:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Bus Time-Out, AlarmCode: ', IN2 := #ss_ErrorCode);
	            101:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Systemfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            102:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Bus Time-Out Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            103:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Systemfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            104:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Initfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            105:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Systemfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            106:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Systemfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            107:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Systemfehler Option, AlarmCode: ', IN2 := #ss_ErrorCode);
	            109:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Baugruppe fehlt/P120, AlarmCode: ', IN2 := #ss_ErrorCode);
	            110:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Kundenschnittstelle, AlarmCode: ', IN2 := #ss_ErrorCode);
	            120:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Watchdog extern, AlarmCode: ', IN2 := #ss_ErrorCode);
	            121:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Motorische Abschaltgrenze, AlarmCode: ', IN2 := #ss_ErrorCode);
	            122:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Generatorische Abschaltgrenze, AlarmCode: ', IN2 := #ss_ErrorCode);
	            123:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Drehmomentengrenze, AlarmCode: ', IN2 := #ss_ErrorCode);
	            124:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Stromgrenze, AlarmCode: ', IN2 := #ss_ErrorCode);
	            125:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Lastmonitor, AlarmCode: ', IN2 := #ss_ErrorCode);
	            128:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Analog-In.Minimum, AlarmCode: ', IN2 := #ss_ErrorCode);
	            129:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Analog-In.Maximum, AlarmCode: ', IN2 := #ss_ErrorCode);
	            130:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Drehgeberfehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            131:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Schleppfehler Drehzahl, AlarmCode: ', IN2 := #ss_ErrorCode);
	            132:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ausschaltüberwachung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            160:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Phasenfehler Motor, AlarmCode: ', IN2 := #ss_ErrorCode);
	            161:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Magnetisierungsstrom Überwachung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            180:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'reserviert, AlarmCode: ', IN2 := #ss_ErrorCode);
	            190:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Parameteridentifikation, AlarmCode: ', IN2 := #ss_ErrorCode);
	            191:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Stern-/ Dreieck-Schaltung Motor falsch, AlarmCode: ', IN2 := #ss_ErrorCode);
	            200:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'reserviert, AlarmCode: ', IN2 := #ss_ErrorCode);
	            201:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Watchdog, AlarmCode: ', IN2 := #ss_ErrorCode);
	            202:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Stack Overflow, AlarmCode: ', IN2 := #ss_ErrorCode);
	            203:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Stack Underflow, AlarmCode: ', IN2 := #ss_ErrorCode);
	            204:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Undefined Opcode, AlarmCode: ', IN2 := #ss_ErrorCode);
	            205:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Protected Instruction, AlarmCode: ', IN2 := #ss_ErrorCode);
	            206:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Illegal Word Access, AlarmCode: ', IN2 := #ss_ErrorCode);
	            207:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Illegal Instruction Access, AlarmCode: ', IN2 := #ss_ErrorCode);
	            208:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Programmspeicher Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            209:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Dual-Ported RAM, AlarmCode: ', IN2 := #ss_ErrorCode);
	            210:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'NMI Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            211:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'PLL Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            212:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'ADU Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            213:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'PMI Fehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            214:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Userstack Overflow, AlarmCode: ', IN2 := #ss_ErrorCode);
	            ELSE  // Unknow alarm code
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Alarm unbekannt, Alarmcode: ', IN2 := #ss_ErrorCode);
	        END_CASE;
	    ELSE
	        #ts_ErrorTextGerman := 'Alarmcode ändern';
	    END_IF;
	    
	    // Write german error code 
	    IF #sx_InternalErrorTrigger THEN
	        #ts_ErrorTextGerman := CONCAT(IN1 := #is_ID, IN2 := ' NORD VFD hat interner Fehler: ', IN3 := #ts_ErrorTextGerman);
	    END_IF;
	    
	    IF #sx_InternalWarningTrigger THEN
	        #ts_ErrorTextGerman := CONCAT(IN1 := #is_ID, IN2 := ' NORD VFD hat interner Warnung: ', IN3 := #ts_ErrorTextGerman);
	    END_IF;
	    
	END_REGION
	
	REGION 6 - Internal VFD Error
	    // Program Alarm internal VFD error
	    #InternalVFDError(SIG := #sx_InternalErrorTrigger,
	                      TIMESTAMP := #Time,
	                      SD_1 := #ts_ErrorText,
	                      SD_2 := #ts_ErrorTextGerman);
	END_REGION
	
	REGION 7 - Internal VFD Warning
	    // Program Alarm internal VFD Warning
	    #InternalVFDWarning(SIG := #sx_InternalWarningTrigger,
	                        TIMESTAMP := #Time,
	                        SD_1 := #ts_ErrorText,
	                        SD_2 := #ts_ErrorTextGerman);
	END_REGION
	
	REGION 8 - Profinet slave Error
	    // Program Alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_VFD_Status.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - Profinet slave not online 
	    // Program Alarm profinet slave not online 
	    #PNSlaveNotonline(SIG := #iq_UDT_VFD_Status.PNSlaveNotonline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 10 - Profinet slave Error
	    // Program Alarm internal VFD Error
	    #PNSlaveWarnnig(SIG := #iq_UDT_VFD_Status.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 11 - VFD Feedback Error
	    // Program Alarm VFD Feedback Error
	    #VFDRunningFeedbackError(SIG := #iq_UDT_VFD_Status.VFDRunningFeedbackError,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_MFC_Events"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 182
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      ix_AckHMI { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Reset
   END_VAR

   VAR_IN_OUT 
      iqs_MFCEventsAlarms : "UDT_MFCEvent";   // MFC events alarms structure
   END_VAR

   VAR 
      MFCModuleFailure {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Module Failure
      MFCModuleFailureReset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Module Failure Reset
      MFCNoConnectionToHost {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Connection To Host
      MFCNoConnectionToHostReset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Connection To Host Reset
      MFCNoDestinationFromHost {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Destination From Host
      MFCNoDestinationFromHostReset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Destination From Host Reset
      MFCHostContigency {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Host Contigency
      MFCHostContigencyReset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Host Contigency Reset
      MFCNoConnectionToHandheldscaner {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Connection To Handheld scaner
      MFCNoConnectionToHandheldscanerReset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC No Connection To Handheld scaner Reset
      MFCDisableSNCYfinger1 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 1
      MFCDisableSNCYfinger1Reset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 1 Reset
      MFCDisableSNCYfinger2 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 2
      MFCDisableSNCYfinger2Reset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 2 Reset
      MFCDisableSNCYfinger3 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 3
      MFCDisableSNCYfinger3Reset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 3 Reset
      MFCDisableSNCYfinger4 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 4
      MFCDisableSNCYfinger4Reset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 4 Reset
      MFCDisableSNCYfinger5 {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 5
      MFCDisableSNCYfinger5Reset {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // MFC Disable SNCY finger 5 Reset
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/5/2022   | 0.1       | R. Golonka      | MCP Events Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - MFCa Module Failure Program Alarm
	    // Program alrm: MFC Module Failure Program Alarm
	    IF #iqs_MFCEventsAlarms.Alarms[1].ResetPLC THEN // with ackknowladge
	        #MFCModuleFailureReset(SIG := #iqs_MFCEventsAlarms.Alarms[1].Active,
	                               TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCModuleFailure(SIG := #iqs_MFCEventsAlarms.Alarms[1].Active,
	                          TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 2 - MFC No Connection 
	    // Program alrm: MFC No Connection 
	    IF #iqs_MFCEventsAlarms.Alarms[2].ResetPLC THEN // with ackknowladge
	        #MFCNoConnectionToHostReset(SIG := #iqs_MFCEventsAlarms.Alarms[2].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCNoConnectionToHost(SIG := #iqs_MFCEventsAlarms.Alarms[2].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 3 - MFC Multiple consecutive no destination from host
	    // Program alrm: MFC Multiple consecutive no destination from host
	    IF #iqs_MFCEventsAlarms.Alarms[3].ResetPLC THEN // with ackknowladge
	        #MFCNoDestinationFromHostReset(SIG := #iqs_MFCEventsAlarms.Alarms[3].Active,
	                                       TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCNoDestinationFromHost(SIG := #iqs_MFCEventsAlarms.Alarms[3].Active,
	                                  TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 4 - MFC Host contingency mode active
	    // Program alrm: MFC Host contingency mode active
	    IF #iqs_MFCEventsAlarms.Alarms[4].ResetPLC THEN // with ackknowladge
	        #MFCHostContigencyReset(SIG := #iqs_MFCEventsAlarms.Alarms[4].Active,
	                                TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCHostContigency(SIG := #iqs_MFCEventsAlarms.Alarms[4].Active,
	                           TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 5 - MFC No connection to handheld scanner
	    // Program alrm: MFC Host contingency mode active
	    IF #iqs_MFCEventsAlarms.Alarms[5].ResetPLC THEN // with ackknowladge
	        #MFCNoConnectionToHandheldscanerReset(SIG := #iqs_MFCEventsAlarms.Alarms[5].Active,
	                                              TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCNoConnectionToHandheldscaner(SIG := #iqs_MFCEventsAlarms.Alarms[5].Active,
	                                         TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 6 - MFC Disable SNCY finger 1
	    // Program alrm: MFC Disable SNCY finger 1
	    IF #iqs_MFCEventsAlarms.Alarms[6].ResetPLC THEN // with ackknowladge
	        #MFCDisableSNCYfinger1Reset(SIG := #iqs_MFCEventsAlarms.Alarms[6].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCDisableSNCYfinger1(SIG := #iqs_MFCEventsAlarms.Alarms[6].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 7 - MFC Disable SNCY finger 2
	    // Program alrm: MFC Disable SNCY finger 2
	    IF #iqs_MFCEventsAlarms.Alarms[7].ResetPLC THEN // with ackknowladge
	        #MFCDisableSNCYfinger2Reset(SIG := #iqs_MFCEventsAlarms.Alarms[7].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCDisableSNCYfinger2(SIG := #iqs_MFCEventsAlarms.Alarms[7].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 8 - MFC Disable SNCY finger 3
	    // Program alrm: MFC Disable SNCY finger 3
	    IF #iqs_MFCEventsAlarms.Alarms[8].ResetPLC THEN // with ackknowladge
	        #MFCDisableSNCYfinger3Reset(SIG := #iqs_MFCEventsAlarms.Alarms[8].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCDisableSNCYfinger3(SIG := #iqs_MFCEventsAlarms.Alarms[8].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 9 - MFC Disable SNCY finger 4
	    // Program alrm: MFC Disable SNCY finger 4
	    IF #iqs_MFCEventsAlarms.Alarms[9].ResetPLC THEN // with ackknowladge
	        #MFCDisableSNCYfinger4Reset(SIG := #iqs_MFCEventsAlarms.Alarms[9].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCDisableSNCYfinger4(SIG := #iqs_MFCEventsAlarms.Alarms[9].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 10 - MFC Disable SNCY finger 5
	    // Program alrm: MFC Disable SNCY finger 5
	    IF #iqs_MFCEventsAlarms.Alarms[10].ResetPLC THEN // with ackknowladge
	        #MFCDisableSNCYfinger5Reset(SIG := #iqs_MFCEventsAlarms.Alarms[10].Active,
	                                    TIMESTAMP := #Time);
	    ELSE // without ackknowladge
	        #MFCDisableSNCYfinger5(SIG := #iqs_MFCEventsAlarms.Alarms[10].Active,
	                               TIMESTAMP := #Time);
	    END_IF;
	    
	END_REGION
	
	REGION 11 - Active event Reset from TP HMI
	    
	    IF #ix_AckHMI THEN
	        IF #iqs_MFCEventsAlarms.Alarms[1].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[1].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[2].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[2].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[3].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[3].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[4].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[4].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[5].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[5].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[6].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[6].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[7].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[7].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[8].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[8].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[9].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[9].Active := false;
	        END_IF;
	        IF #iqs_MFCEventsAlarms.Alarms[10].ResetPLC THEN
	            #iqs_MFCEventsAlarms.Alarms[10].Active := false;
	        END_IF;
	    END_IF;
	    
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_Loader"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 180
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_LoaderStatus : "UDT_LoaderStatus";   // Loader status
   END_VAR

   VAR 
      Disabled {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Disabled
      VFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm VFD Error
      NotHealthy {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm not healthy
      StoreMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm store mode
      FeedMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Feed mode
      RunMode {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm run mode
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------   
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Loader Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Disabled
	    //  Program Alarm Disabled
	    #Disabled(SIG := #iq_UDT_LoaderStatus.Specific.Disabled,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - VFD Error
	    //  Program Alarm VFD Error
	    #VFDError(SIG := #iq_UDT_LoaderStatus.Specific.VFDError,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - Not Healthy
	    //  Program Alarm not healthy
	    #NotHealthy(SIG := #iq_UDT_LoaderStatus.Specific.NotHealthy,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - Store mode
	    //  Program Alarm store mode
	    #StoreMode(SIG := #iq_UDT_LoaderStatus.Specific.StoreMode,
	               TIMESTAMP := #Time,
	               SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - Feed mode
	    //  Program Alarm Feed mode
	    #FeedMode(SIG := #iq_UDT_LoaderStatus.Specific.FeedMode,
	              TIMESTAMP := #Time,
	              SD_1 := #is_ID);
	END_REGION
	
	REGION 6 - Run mode
	    //  Program Alarm run mode
	    #RunMode(SIG := #iq_UDT_LoaderStatus.Specific.RunMode,
	             TIMESTAMP := #Time,
	             SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_InterrollMulticontrol"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 179
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
      i_UDT_TP_Interface { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "UDT_TPInterfaceV2";   // HMI Interface
   END_VAR

   VAR_IN_OUT 
      iq_UDT_VFD_Status : "UDT_VfdStatus";   // HMI status structure
   END_VAR

   VAR 
      CommunicationError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm communication error
      InternalVFDError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal error
      InternalVFDWarning {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal warning
      PNSlaveError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave error
      PNSlaveNotonline {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm profinet slave not online
      PNSlaveWarnnig {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm internal warning
      VFDRunningFeedbackError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm feedback error
      sx_AlarmCodeChange { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Alarm error code change trigger
      si_PreviousErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Previous error code
      sx_InternalErrorTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Internal error trigger
      sx_InternalWarningTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Internal warning trigger
      ss_ErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // Nord error code number
   END_VAR

   VAR_TEMP 
      ts_ErrorText : String;   // Temp. Error text
      ts_ErrorTextGerman : String;   // Temp. german error text
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------   
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023  | 0.1       | R. Golonka      | Interroll Multicontrol Alarm
	30/01/2023  | 0.2       | R. Golonka      | Interroll Multicontrol error code 
	                                          | need to be genereted in both language on the trigger <---------- !!!
	13/3/2024   | 0.3       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1- Communiation Error
	    // Program Alarm communication error Movikit
	    #CommunicationError(SIG := #iq_UDT_VFD_Status.CommunicationErrorMovikit,
	                        TIMESTAMP := #Time,
	                        SD_1 := #is_ID);
	END_REGION
	
	REGION 2 - Alarm change trigger 
	    
	    // Alarm change 
	    #sx_AlarmCodeChange := (#si_PreviousErrorCode <> #iq_UDT_VFD_Status.ErrorCode);
	    // Previous alarm change 
	    #si_PreviousErrorCode := #iq_UDT_VFD_Status.ErrorCode;
	    // Internal error trigger 
	    #sx_InternalErrorTrigger := NOT #sx_AlarmCodeChange AND #iq_UDT_VFD_Status.InternalError;
	    // Internal warning trigger 
	    #sx_InternalWarningTrigger := NOT #sx_AlarmCodeChange AND #iq_UDT_VFD_Status.InternalWarning;
	    
	END_REGION
	
	REGION 3 - Error code to floating point string
	    // Interroll system error code (according to Interroll Multicontrol manual)
	    #ss_ErrorCode := '';
	    VAL_STRG(IN := #iq_UDT_VFD_Status.ErrorCode,
	             SIZE := 0,
	             PREC := 1,
	             FORMAT := 0,
	             P := 1,
	             OUT => #ss_ErrorCode);
	END_REGION
	
	REGION 4 - Error text english
	    
	    // Clear temporary string
	    #ts_ErrorText := '';
	    
	    // Posibly error code
	    IF #sx_InternalErrorTrigger OR #sx_InternalWarningTrigger THEN
	        CASE #iq_UDT_VFD_Status.ErrorCode OF
	                // Error code to string code 
	            0:
	                #ts_ErrorText := CONCAT(IN1 := 'No error in the application program, error code: ', IN2 := #ss_ErrorCode);
	            1:
	                #ts_ErrorText := CONCAT(IN1 := 'Unknown error in the application program, error code: ', IN2 := #ss_ErrorCode);
	            2:
	                #ts_ErrorText := CONCAT(IN1 := 'Severe system error, error code: ', IN2 := #ss_ErrorCode);
	            3:
	                #ts_ErrorText := CONCAT(IN1 := 'Minor system error, error code: ', IN2 := #ss_ErrorCode);
	            4:
	                #ts_ErrorText := CONCAT(IN1 := 'Warning, error code: ', IN2 := #ss_ErrorCode);
	            5:
	                #ts_ErrorText := CONCAT(IN1 := 'Searched for object not found, error code: ', IN2 := #ss_ErrorCode);
	            6:
	                #ts_ErrorText := CONCAT(IN1 := 'Number outside the valid value range, error code: ', IN2 := #ss_ErrorCode);
	            10:
	                #ts_ErrorText := CONCAT(IN1 := 'Terminal has no input data, error code: ', IN2 := #ss_ErrorCode);
	            11:
	                #ts_ErrorText := CONCAT(IN1 := 'Terminal session aborted, error code: ', IN2 := #ss_ErrorCode);
	            12:
	                #ts_ErrorText := CONCAT(IN1 := 'Invalid parameter or input value, error code: ', IN2 := #ss_ErrorCode);
	            13:
	                #ts_ErrorText := CONCAT(IN1 := 'Initialisation error in the module, error code: ', IN2 := #ss_ErrorCode);
	            14:
	                #ts_ErrorText := CONCAT(IN1 := 'Buffer overflow, error code: ', IN2 := #ss_ErrorCode);
	            20:
	                #ts_ErrorText := CONCAT(IN1 := 'ConfInvalid network or bus configuration, error code: ', IN2 := #ss_ErrorCode);
	            21:
	                #ts_ErrorText := CONCAT(IN1 := 'Network communication error, error code: ', IN2 := #ss_ErrorCode);
	            22:
	                #ts_ErrorText := CONCAT(IN1 := 'Network restart after system (re)start, error code: ', IN2 := #ss_ErrorCode);
	            23:
	                #ts_ErrorText := CONCAT(IN1 := 'Message received from neighbouring device, error code: ', IN2 := #ss_ErrorCode);
	            24:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: Reception interrupted, error code: ', IN2 := #ss_ErrorCode);
	            25:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: Transmission interrupted, error code: ', IN2 := #ss_ErrorCode);
	            26:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: Invalid message received, error code: ', IN2 := #ss_ErrorCode);
	            27:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: No response to handshake message received, error code: ', IN2 := #ss_ErrorCode);
	            28:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: No life signal received from neighbouring device, error code: ', IN2 := #ss_ErrorCode);
	            29:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in communication with neighbouring device: No response to emergency stop message, error code: ', IN2 := #ss_ErrorCode);
	            30:
	                #ts_ErrorText := CONCAT(IN1 := 'Access error to error data, error code: ', IN2 := #ss_ErrorCode);
	            31:
	                #ts_ErrorText := CONCAT(IN1 := 'Access error to error log file, error code: ', IN2 := #ss_ErrorCode);
	            40:
	                #ts_ErrorText := CONCAT(IN1 := 'ModeChange of mode not permitted, error code: ', IN2 := #ss_ErrorCode);
	            41:
	                #ts_ErrorText := CONCAT(IN1 := 'Access to LED control not permitted, error code: ', IN2 := #ss_ErrorCode);
	            42:
	                #ts_ErrorText := CONCAT(IN1 := 'ConfInvalid configuration of the application program, error code: ', IN2 := #ss_ErrorCode);
	            50:
	                #ts_ErrorText := CONCAT(IN1 := 'RollerDrive 1 error, error code: ', IN2 := #ss_ErrorCode);
	            51:
	                #ts_ErrorText := CONCAT(IN1 := 'RollerDrive 2 error, error code: ', IN2 := #ss_ErrorCode);
	            52:
	                #ts_ErrorText := CONCAT(IN1 := 'RollerDrive 3 error, error code: ', IN2 := #ss_ErrorCode);
	            53:
	                #ts_ErrorText := CONCAT(IN1 := 'RollerDrive 4 error, error code: ', IN2 := #ss_ErrorCode);
	            60:
	                #ts_ErrorText := CONCAT(IN1 := 'Error in the application program, error code: ', IN2 := #ss_ErrorCode);
	            61:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            62:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            63:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            64:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            65:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            66:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            67:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            68:
	                #ts_ErrorText := CONCAT(IN1 := 'Specific errors in the application program. Errors in the ZPA/ZPA+ programs are explained in the "MultiControl / RollerDrive - Start-up and Programming" supplement., error code: ', IN2 := #ss_ErrorCode);
	            69:
	                #ts_ErrorText := CONCAT(IN1 := 'Application program cannot be started, error code: ', IN2 := #ss_ErrorCode);
	            70:
	                #ts_ErrorText := CONCAT(IN1 := '(Re)start of the application program/system, error code: ', IN2 := #ss_ErrorCode);
	            71:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: Supply voltage failure, error code: ', IN2 := #ss_ErrorCode);
	            90:
	                #ts_ErrorText := CONCAT(IN1 := 'Temperature error: Temperature at the brake resistor too high, error code: ', IN2 := #ss_ErrorCode);
	            91:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: Supply voltage (L2) too low, error code: ', IN2 := #ss_ErrorCode);
	            92:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: Supply voltage (L2) too high, error code: ', IN2 := #ss_ErrorCode);
	            93:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: No motor voltage, error code: ', IN2 := #ss_ErrorCode);
	            94:
	                #ts_ErrorText := CONCAT(IN1 := 'Brake resistor overload, error code: ', IN2 := #ss_ErrorCode);
	            95:
	                #ts_ErrorText := CONCAT(IN1 := 'Emergency stop from neighbouring transfer device, error code: ', IN2 := #ss_ErrorCode);
	            96:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: Supply voltage (L1) too low, error code: ', IN2 := #ss_ErrorCode);
	            97:
	                #ts_ErrorText := CONCAT(IN1 := 'Voltage error: Supply voltage (L1) too high, error code: ', IN2 := #ss_ErrorCode);
	            101:
	                #ts_ErrorText := CONCAT(IN1 := 'Error when loading the application program, error code: ', IN2 := #ss_ErrorCode);
	            102:
	                #ts_ErrorText := CONCAT(IN1 := 'New application program loaded, error code: ', IN2 := #ss_ErrorCode);
	            103:
	                #ts_ErrorText := CONCAT(IN1 := 'ConfInvalid configuration for the selected application program, error code: ', IN2 := #ss_ErrorCode);
	            104:
	                #ts_ErrorText := CONCAT(IN1 := 'ParamsInvalid parameters for teach-in procedure, error code: ', IN2 := #ss_ErrorCode);
	            105:
	                #ts_ErrorText := CONCAT(IN1 := 'Not possible to save connection settings for communication with neighbouring devices, error code: ', IN2 := #ss_ErrorCode);
	            106:
	                #ts_ErrorText := CONCAT(IN1 := 'Not possible to read connection settings for communication with neighbouring devices, error code: ', IN2 := #ss_ErrorCode);
	            ELSE  // Unknow alarm code
	                #ts_ErrorText := CONCAT(IN1 := 'Alarm unknown, error code: ', IN2 := (#ss_ErrorCode));
	        END_CASE;
	    ELSE
	        #ts_ErrorText := 'Alarm code change';
	    END_IF;
	    
	    // Write english error code
	    IF #sx_InternalErrorTrigger THEN
	        #ts_ErrorText := CONCAT(IN1 := #is_ID, IN2 := ' Interroll Multicontrol has internal error: ', IN3 := #ts_ErrorText);
	    END_IF;
	    
	    IF #sx_InternalWarningTrigger THEN
	        #ts_ErrorText := CONCAT(IN1 := #is_ID, IN2 := ' Interroll Multicontrol has internal warning: ', IN3 := #ts_ErrorText);
	    END_IF;
	    
	END_REGION
	
	REGION 5 - Error text german
	    
	    // Clear temorary string
	    #ts_ErrorTextGerman := '';
	    
	    // Possibly error code
	    IF #sx_InternalErrorTrigger OR #sx_InternalWarningTrigger THEN
	        CASE #iq_UDT_VFD_Status.ErrorCode OF
	                // Error code to string code         
	            0:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Kein Fehler im Applikationsprogramm, AlarmCode: ', IN2 := #ss_ErrorCode);
	            1:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Unbekannter Fehler im Applikationsprogramm, AlarmCode: ', IN2 := #ss_ErrorCode);
	            2:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Schwerer Systemfehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            3:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Kleiner Systemfehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            4:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Warnung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            5:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Gesuchtes Objekt wurde nicht gefunden, AlarmCode: ', IN2 := #ss_ErrorCode);
	            6:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Zahl außerhalb des gültigen Wertebereichs, AlarmCode: ', IN2 := #ss_ErrorCode);
	            10:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Terminal hat keine Eingabedaten, AlarmCode: ', IN2 := #ss_ErrorCode);
	            11:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Terminalsitzung abgebrochen, AlarmCode: ', IN2 := #ss_ErrorCode);
	            12:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ungültiger Parameter oder Eingangswert, AlarmCode: ', IN2 := #ss_ErrorCode);
	            13:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Initialisierungsfehler des Moduls, AlarmCode: ', IN2 := #ss_ErrorCode);
	            14:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Speicherüberlauf, AlarmCode: ', IN2 := #ss_ErrorCode);
	            20:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ungültige Netzwerk - oder Buskonfiguration, AlarmCode: ', IN2 := #ss_ErrorCode);
	            21:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Netzwerk Kommunikationsfehler, AlarmCode: ', IN2 := #ss_ErrorCode);
	            22:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Neustart des Netzwerks nach System (Neu-)Start, AlarmCode: ', IN2 := #ss_ErrorCode);
	            23:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Nachricht von Nachbarn erhalten, AlarmCode: ', IN2 := #ss_ErrorCode);
	            24:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Empfang gestört, AlarmCode: ', IN2 := #ss_ErrorCode);
	            25:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Senden gestört, AlarmCode: ', IN2 := #ss_ErrorCode);
	            26:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Ungültige Nachricht empfangen, AlarmCode: ', IN2 := #ss_ErrorCode);
	            27:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Keine Antwort auf Handshake-Nachricht erhalten, AlarmCode: ', IN2 := #ss_ErrorCode);
	            28:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Kein Lebenssignal vom Nachbarn empfangen, AlarmCode: ', IN2 := #ss_ErrorCode);
	            29:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler in der Nachbarschaftskommunikation: Keine Antwort auf Not-Halt-Meldung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            30:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Zugriffsfehler auf die Fehlerdaten, AlarmCode: ', IN2 := #ss_ErrorCode);
	            31:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Zugriffsfehler auf die Fehler-Log Datei, AlarmCode: ', IN2 := #ss_ErrorCode);
	            40:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Wechsel des Modus nicht erlaubt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            41:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Zugriff auf LED-Steuerung nicht erlaubt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            42:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ungültige Konfiguration des Applikationsprogramms, AlarmCode: ', IN2 := #ss_ErrorCode);
	            50:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler RollerDrive 1, AlarmCode: ', IN2 := #ss_ErrorCode);
	            51:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler RollerDrive 2, AlarmCode: ', IN2 := #ss_ErrorCode);
	            52:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler RollerDrive 3, AlarmCode: ', IN2 := #ss_ErrorCode);
	            53:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler RollerDrive 4, AlarmCode: ', IN2 := #ss_ErrorCode);
	            60:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler im Applikationsprogramm, AlarmCode: ', IN2 := #ss_ErrorCode);
	            61:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            62:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            63:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            64:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            65:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            66:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            67:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            68:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spezifische Fehler des Applikationsprogramms. Die Fehler der ZPA / ZPA+ Programme werden im Zusatzdokument „MultiControl / RollerDrive -Inbetriebnahme und Programmierung” erklärt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            69:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Start des Applikationsprogramms nicht möglich, AlarmCode: ', IN2 := #ss_ErrorCode);
	            70:
	                #ts_ErrorTextGerman := CONCAT(IN1 := '(Neu-)Start des Applikationsprogramms / des Systems, AlarmCode: ', IN2 := #ss_ErrorCode);
	            71:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Zusammenbruch der Versorgungsspannung, AlarmCode: ', IN2 := #ss_ErrorCode);
	            90:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Temperaturfehler: Temperatur am Bremswiderstand zu hoch, AlarmCode: ', IN2 := #ss_ErrorCode);
	            91:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Versorgungsspannung (L2) zu niedrig, AlarmCode: ', IN2 := #ss_ErrorCode);
	            92:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Versorgungsspannung (L2) zu hoch, AlarmCode: ', IN2 := #ss_ErrorCode);
	            93:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Motorspannung fehlt, AlarmCode: ', IN2 := #ss_ErrorCode);
	            94:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Überlastung des Bremswiderstands, AlarmCode: ', IN2 := #ss_ErrorCode);
	            95:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Not-Halt vom Transfer-Nachbarn, AlarmCode: ', IN2 := #ss_ErrorCode);
	            96:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Versorgungsspannung (L1) zu niedrig, AlarmCode: ', IN2 := #ss_ErrorCode);
	            97:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Spannungsfehler: Versorgungsspannung (L1) zu hoch, AlarmCode: ', IN2 := #ss_ErrorCode);
	            101:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Fehler beim Laden des Anwendungsprogramms, AlarmCode: ', IN2 := #ss_ErrorCode);
	            102:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Neues Anwendungsprogramm geladen, AlarmCode: ', IN2 := #ss_ErrorCode);
	            103:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ungültige Konfiguration für das gewählte Applikationsprogramm, AlarmCode: ', IN2 := #ss_ErrorCode);
	            104:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Ungültige Parameter für Teach-In Prozedur, AlarmCode: ', IN2 := #ss_ErrorCode);
	            105:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Speichern der Verbindungseinstellungen der Nachbarschaftskommunikation nicht möglich, AlarmCode: ', IN2 := #ss_ErrorCode);
	            106:
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Lesen der Verbindungseinstellungen der Nachbarschaftskommunikation nicht möglich, AlarmCode: ', IN2 := #ss_ErrorCode);
	            ELSE  // Unknow alarm code
	                #ts_ErrorTextGerman := CONCAT(IN1 := 'Alarm unbekannt, Alarmcode: ', IN2 := #ss_ErrorCode);
	        END_CASE;
	    ELSE
	        #ts_ErrorTextGerman := 'Alarmcode ändern';
	    END_IF;
	    
	    // Write german error code
	    IF #sx_InternalErrorTrigger THEN
	        #ts_ErrorTextGerman := CONCAT(IN1 := #is_ID, IN2 := ' Interroll Multicontrol hat interner Fehler: ', IN3 := #ts_ErrorTextGerman);
	    END_IF;
	    
	    IF #sx_InternalWarningTrigger THEN
	        #ts_ErrorTextGerman := CONCAT(IN1 := #is_ID, IN2 := ' Interroll Multicontrol hat interner Warnung: ', IN3 := #ts_ErrorTextGerman);
	    END_IF;
	    
	END_REGION
	
	REGION 6 - Internal VFD Error
	    // Program Alarm internal VFD error
	    #InternalVFDError(SIG := #sx_InternalErrorTrigger,
	                      TIMESTAMP := #Time,
	                      SD_1 := #ts_ErrorText,
	                      SD_2 := #ts_ErrorTextGerman);
	END_REGION
	
	REGION 7 - Internal VFD Warning
	    // Program Alarm internal VFD Warning
	    #InternalVFDWarning(SIG := #sx_InternalWarningTrigger,
	                        TIMESTAMP := #Time,
	                        SD_1 := #ts_ErrorText,
	                        SD_2 := #ts_ErrorTextGerman);
	END_REGION
	
	REGION 8 - Profinet slave Error
	    // Program Alarm profinet slave error
	    #PNSlaveError(SIG := #iq_UDT_VFD_Status.PNSlaveError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	END_REGION
	
	REGION 9 - Profinet slave not online 
	    // Program Alarm profinet slave not online 
	    #PNSlaveNotonline(SIG := #iq_UDT_VFD_Status.PNSlaveNotonline,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	END_REGION
	
	REGION 10 - Profinet slave Error
	    // Program Alarm internal VFD Error
	    #PNSlaveWarnnig(SIG := #iq_UDT_VFD_Status.PNSlaveWarning,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	REGION 11 - VFD Feedback Error
	    // Program Alarm VFD Feedback Error
	    #VFDRunningFeedbackError(SIG := #iq_UDT_VFD_Status.VFDRunningFeedbackError,
	                             TIMESTAMP := #Time,
	                             SD_1 := #is_ID);
	END_REGION
	
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_EuchnerLock"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 178
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_EuchnerLock : "UDT_EuchnerLockStatusV2";
   END_VAR

   VAR 
      LockFault {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;
      DoorClosed {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      DoorOpened {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      BoltTongueClosed {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      Safetylocked {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      SafetyLockAckReq {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      ReqMissingAccessRights {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      ResetMissingAccessRights {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
      DoorOpenedWithoutReq {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Program_Alarm;
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	10/10/2022   | 0.1       | M. Diebel       | EuchnerLock Alarm | DHL Munich 2023
	13/3/2024    | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - LockFault
	    //Program Alarm LockFault
	    #LockFault(SIG := #iq_UDT_EuchnerLock.LockFault,
	               TIMESTAMP := #Time,
	               SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 2 - DoorClosed
	    //Program Alarm DoorClosed
	    #DoorClosed(SIG := #iq_UDT_EuchnerLock.DoorClosed,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 3 - DoorOpened
	    //Program Alarm Door Opened
	    #DoorOpened(SIG := #iq_UDT_EuchnerLock.DoorOpened,
	                TIMESTAMP := #Time,
	                SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 4 - BoltTongueClosed
	    //Program Alarm BoltTongueClosed
	    #BoltTongueClosed(SIG := #iq_UDT_EuchnerLock.BoltTongueClosed,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 5 - Safelylocked
	    //Program Alarm Safelylocked
	    #Safetylocked(SIG := #iq_UDT_EuchnerLock.Safelylocked,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 6 - SafetyLockAckReq
	    //Program Alarm SafetyLockAckReq
	    #SafetyLockAckReq(SIG := #iq_UDT_EuchnerLock.SafetyLockAckReq,
	                      TIMESTAMP := #Time,
	                      SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 7 - Request missing rights
	    //Program Alarm ReqMissingAccessRights
	    #ReqMissingAccessRights(SIG := #iq_UDT_EuchnerLock.ReqMissingAccessRights,
	                            TIMESTAMP := #Time,
	                            SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 8 - Reset missing rights
	    //Program Alarm ResetMissingAccessRights
	    #ResetMissingAccessRights(SIG := #iq_UDT_EuchnerLock.ResetMissingAccessRights,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 9 - Door opened without request
	    //Program Alarm DoorOpenedWithoutReq
	    #DoorOpenedWithoutReq(SIG := #iq_UDT_EuchnerLock.DoorOpenedWithoutReq,
	                          TIMESTAMP := #Time,
	                          SD_1 := #is_ID);
	    
	END_REGION
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_EStop"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 177
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
      ix_Estop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // E-stop status
      ix_QBAD { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // QBAD from card
   END_VAR

   VAR 
      sx_EstopStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      EStop {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm Estop
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------   
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/3/2022   | 0.1       | R. Golonka      | Estop Alarm | DHL Munich 2023
	20/10/2022  | 1.1       | S. Theocharis   | Change to boolean and add QBAD
	13/3/2024   | 1.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION Estop Evaluation 
	    
	    #sx_EstopStatus := NOT (NOT #ix_Estop OR #ix_QBAD);
	    
	END_REGION
	
	REGION 2- Estop
	    // Program Alarm Estop
	    #EStop(SIG := #sx_EstopStatus,
	           TIMESTAMP := #Time,
	           SD_1 := #is_ID);
	    
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_DimensionsCheck"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 175
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_DimensionsCheck_Status : "UDT_DimensionsCheckStatusV2";   // Dimension chceck status V2
   END_VAR

   VAR 
      ParcelTooLong {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm parcel too long
      ParcelTooShort {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm parcel too short
      ParcelTooHigh {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm parcel too high
      ParcelTooLow {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm pracel too low
      ParcelTooWide {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm parcel too wide
      ParcelTooNarrow {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm parcel too narrow
      IncorrectParcelOrientation {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm incorect parcel orientation
      GeneralError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm general Error
      DisabledGeneralFunctionality {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled general functionality
      DisabledTooLongParcel {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled parcel too long
      DisabledTooShortParcelError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled parcel too short
      DisabledTooHighParcelError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled parcel too high
      DisabledTooLowParcelError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled pracel too low
      DisabledTooWideParcelError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled parcel too wide
      DisabledTooNarrowParcelError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled parcel too narrow
      DisabledParcelOrientationError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program Alarm disabled incorect parcel orientation
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	---------------------------------------------------------------------------------------- 
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	22/03/2023    | 0.1       | R. Golonka      | Dimensions Check Gate | DHL Munich 2023
	13/3/2024     | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	REGION 1 - Parcel too long
	    // Program Alarm parcel too long
	    #ParcelTooLong(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooLongError,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 2 - Parcel too short
	    // Program Alarm parcel too short
	    #ParcelTooShort(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooShortError,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 3 - Parcel too high
	    // Program Alarm parcel too high
	    #ParcelTooHigh(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooHighError,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 4 - Parcel too low
	    // Program Alarm pracel too low
	    #ParcelTooLow(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooLowError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 5 - Parcel too wide
	    // Program Alarm parcel too wide
	    #ParcelTooWide(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooWideError,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 6 - Parcel too narrow
	    // Program Alarm parcel too narrow
	    #ParcelTooNarrow(SIG := #iq_UDT_DimensionsCheck_Status.Specific.ParcelTooNarrowError,
	                     TIMESTAMP := #Time,
	                     SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 7 - Incorect parcel orientation
	    // Program Alarm incorect parcel orientation
	    #IncorrectParcelOrientation(SIG := #iq_UDT_DimensionsCheck_Status.Specific.IncorrectParcelOrientationError,
	                                TIMESTAMP := #Time,
	                                SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 8 - Genaral Error
	    // Program Alarm general Error
	    #GeneralError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.GeneralError,
	                  TIMESTAMP := #Time,
	                  SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 9 - Disabled Parcel too long
	    // Program Alarm disabled parcel too long error 
	    #DisabledTooLongParcel(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooLongParcel,
	                           TIMESTAMP := #Time,
	                           SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 10 - Disabled Parcel too short
	    // Program Alarm disabled parcel too short error 
	    #DisabledTooShortParcelError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooShortParcelError,
	                                 TIMESTAMP := #Time,
	                                 SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 11 - Disabled Parcel too high
	    // Program Alarm disabled parcel too high error
	    #DisabledTooHighParcelError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooHighParcelError,
	                                TIMESTAMP := #Time,
	                                SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 12 - Disabled Parcel too low
	    // Program Alarm disabled pracel too low error
	    #DisabledTooLowParcelError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooLowParcelError,
	                               TIMESTAMP := #Time,
	                               SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 13 - Disabled Parcel too wide
	    // Program Alarm disabled parcel too wide error
	    #DisabledTooWideParcelError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooWideParcelError,
	                                TIMESTAMP := #Time,
	                                SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 14 - Disabled Parcel too narrow
	    // Program Alarm disabled parcel too narrow error
	    #DisabledTooNarrowParcelError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledTooNarrowParcelError,
	                                  TIMESTAMP := #Time,
	                                  SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 15 - Disabled Incorect parcel orientation
	    // Program Alarm disabled incorect parcel orientation error
	    #DisabledParcelOrientationError(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledParcelOrientationError,
	                                    TIMESTAMP := #Time,
	                                    SD_1 := #is_ID);
	    
	END_REGION
	
	REGION 16 - Disabled Genaral Error
	    // Program Alarm disabled general error
	    #DisabledGeneralFunctionality(SIG := #iq_UDT_DimensionsCheck_Status.Specific.DisabledGeneralFunctionality,
	                                  TIMESTAMP := #Time,
	                                  SD_1 := #is_ID);
	    
	END_REGION
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FB_TP_ALARM_ABSwitch"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
// ATTRIBUTES
// AUTO_NUMBER = True
// BLOCK_NUMBER = 165
// END_ATTRIBUTES
   VAR_INPUT 
      "Time" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LDT;   // Actual Time
      is_ID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // ID of component
   END_VAR

   VAR_IN_OUT 
      iq_UDT_ABSwitchStatus : "UDT_ABSwitchStatus";   // Status
   END_VAR

   VAR 
      ReferenceError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm referecnce error
      SwitchingTimerError {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm switching time error
      LimitSensorUpperPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit sensor upper position error
      LimitSensorLowerPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm limit sensor lower position error
      UpperSwitchArea_Err {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm upper switch area error
      LowerSwitchArea_Err {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm lower switch area error
      UpperPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm upper position error
      LowerPosition {InstructionName := 'Program_Alarm'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : Program_Alarm;   // Program alarm lower position error
   END_VAR


BEGIN
	(*
	----------------------------------------------------------------------------------------
	|                                                                                      |
	|  Copyright  2023             FORTNA Europe BV                                        |
	|  All Rights Reserved         Netherlands                                             |
	|                                                                                      |
	----------------------------------------------------------------------------------------  
	
	Version history:
	Date        | Version   | Author          | Remark
	----------------------------------------------------------------------------------------
	24/4/2022   | 0.1       | M. Diebel       | ABSwitch Alarm | DHL Munich 2023
	13/3/2024   | 0.2       | S.Nieswiec      | Alligned for new baseline
	*)
	
	
	REGION 1 - ReferenceError
	    // Program Alarm ReferenceError
	    #ReferenceError(SIG := #iq_UDT_ABSwitchStatus.Specific.ReferenceError,
	                    TIMESTAMP := #Time,
	                    SD_1 := #is_ID);
	END_REGION
	
	
	REGION 2 - SwitchingTimeError
	    // Program Alarm SwitchingTimeError 
	    #SwitchingTimerError(SIG := #iq_UDT_ABSwitchStatus.Specific.SwitchingTimerError,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	REGION 3 - LimitSensorUpperPosition
	    // Program Alarm LimitSensorUpperPosition 
	    #LimitSensorUpperPosition(SIG := #iq_UDT_ABSwitchStatus.Specific.LimitSensorUpperPosition,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	END_REGION
	
	REGION 4 - LimitSensorLowerPosition
	    // Program Alarm LimitSensorLowerPosition 
	    #LimitSensorLowerPosition(SIG := #iq_UDT_ABSwitchStatus.Specific.LimitSensorLowerPosition,
	                              TIMESTAMP := #Time,
	                              SD_1 := #is_ID);
	END_REGION
	
	REGION 5 - UpperSwitchArea_Err
	    // Program Alarm UpperSwitchArea_Err 
	    #UpperSwitchArea_Err(SIG := #iq_UDT_ABSwitchStatus.Specific.UpperSwitchAreaError,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	
	REGION 6 - LowerSwitchArea_Err
	    // Program Alarm LowerSwitchArea_Err 
	    #LowerSwitchArea_Err(SIG := #iq_UDT_ABSwitchStatus.Specific.LowerSwitchAreaError,
	                         TIMESTAMP := #Time,
	                         SD_1 := #is_ID);
	END_REGION
	
	REGION 7 - UpperPosition
	    // Program Alarm UpperPosition 
	    #UpperPosition(SIG := #iq_UDT_ABSwitchStatus.Specific.UpperPosition,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
	
	REGION 8 - LowerPosition
	    // Program Alarm LowerPosition 
	    #LowerPosition(SIG := #iq_UDT_ABSwitchStatus.Specific.LowerPosition,
	                   TIMESTAMP := #Time,
	                   SD_1 := #is_ID);
	END_REGION
END_FUNCTION_BLOCK

