TYPE "UDT_GINFedEx"
VERSION : 0.1
   STRUCT
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
      PackageEntrancePoint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[14];   // Entrance point, where LLC starts tracking the parcel.
      PackageEntranceState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Entrance state
      PackageExitPoint { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[14];   // Exit point name, where LLC reports the last known tracking point.
      PackageExitState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Exit point state when LLC reports the last known tracking point.
      PalletType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Pallet code for different type of pallets on the market
      Mask { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Flag to indicate that a pallet has been mask.
      CellNumber { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // Tray/Cell number (for loop sorters) or generated by LLC (on line sorters).
      CellsOccupied { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Cells occupied by the piece for loop sorters.
      ImageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Image ID number created by the ADC system.
      ScanUnitType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Scan unit type
      ADCSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Number assigned by the ADC system
      PackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Number assigned by the LLC system
      LLCSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];
      HLCPackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[10];   // Unique number for the specific package during it stays in HLC system.
      HLCResultCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[16];   // Result code based on processing of the scan event messages.
      ShipmentID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Consignment id of the parcel.
      WeightStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Status to indicate if the parcel/pallet has weight on the system.
      ActualDestination { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes the actual disposition of the package.
      Destination1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      Destination2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      Destination3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      Destination4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      Destination5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      CutOffTimeDestination2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      CutOffTimeDestination3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      CutOffTimeDestination4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      CutOffTimeDestination5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      ReasonCode1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Management Code value that describes the result of attempting to route the package to the Destination
      ReasonCode2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Management Code value that describes the result of attempting to route the package to the Destination
      ReasonCode3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Management Code value that describes the result of attempting to route the package to the Destination
      ReasonCode4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Management Code value that describes the result of attempting to route the package to the Destination
      ReasonCode5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Management Code value that describes the result of attempting to route the package to the Destination
      HLCDataText { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[20];   // Free text for future use.
      Customs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Need to be checked by customs
      DIMSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of dimensioning system.
      DIMStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Basic diagnostic information from the dimensioning system at the moment of the measurement.
      PackageDimLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Length dimension of package in resolution of dim system.
      PackageDimWidth { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Width dimension of package in resolution of dim system.
      PackageDimHeight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Height dimension of package in resolution of dim system.
      DIMUOM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Unit of measure of the package dimensions.
      DimLFTstatusCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Dimension LFT status code.
      DimConfidence { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // The level of assurance for the correct dimensions.
      DimensionSource { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // For combined camera/laser dim acquisition devices. It indicates type of capturing mode
      AlibiDims { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[25];   // Alibi for Dimensions
      SCLSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of weight scale.
      SCLStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Basic diagnostic information from the weight scale system.
      SCLWT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Scale weight of package in resolution of scale system.
      SCLWTUOM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Unit of measurement for Weight
      SCLLFTStatusCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Scale LFT status code.
      AlibiWeight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[25];   // Alibi for Weight
      ReasonCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // This code should be used when the SI message has some defect.
      Stackable { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // If stackable recognition is enabled, Y or N
      Stickerstype { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // When optical recognition is used to sort
      FlyingDocument { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Status to confirm if the document/flyer is prone to fly off the sorter.
      ModeofOperation { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Camera Tunnel operational mode format:
      CameraHeadstatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Diagnostic information on camera/laser heads performing barcode reads.
      PackageDataTruncated { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Y = Full length of barcode data exceeds 9999 bytes, data truncated
      TotalBarcodeDataLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // Length of all barcode data that was sent in bytes;
      Barcode1Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode1status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode1datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode1data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      Barcode2Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode2status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode2datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode2data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      Barcode3Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode3status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode3datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode3data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      BarcodeIdentification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcodestatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcodedatalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes
      Barcodedata { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Sortation barcode
      CustomerID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;   // 6 digits SequentialID (NNNNNN)
      AreaNumber { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Package Sequence ID "Area Number"
      PurgeEnabled { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Purge enabled for parcel: destination overwritten with Purge destination
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExCustomerID"
VERSION : 0.1
   STRUCT
      CustomerIDMemory { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;   // Customer ID memory
      CustomerIDReference { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..999999] of Int;   // Customer ID reference array
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemSpeedAxisConfiguration"
VERSION : 0.1
   STRUCT
      BeltSpeedCorrection { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int := 100;   // Belt speed correction [%]
      Acceleration { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;   // VFD ramp up time for monitoring starting [mm/s2]
      Deceleration { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;   // VFD ramp up time for monitoring stopping [mm/s2]
      SpeedSetpointWindow { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int := 5;   // VFD speed setpoint window (tolerance) [mm/s]
      DirectionReversal { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // If true, direction will be swapped
      InterlockFwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := TRUE;   // False when turning in forward direction is not possible / allowed
      InterlockRvs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := TRUE;   // False when turning in reverse direction is not possible / allowed
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExFacility"
VERSION : 0.1
   STRUCT
      FacilityID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String := '';   // Generated during configuration. It is a fixed value for all systems.
      SystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // System ID of the system making the request.
      System { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // System information
         LOC { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
         TYP { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
         Number { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      END_STRUCT;
      VersionID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // Interface document version.
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // Time Zone Designator
      SS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;   // Maximum frequency of the messages
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemPositioningAxisConfiguration"
VERSION : 0.1
   STRUCT
      PositionWindow { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Position window (tolerance) [degree]
      PositionMax { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Maximum allowed position [degree]
      PositionMin { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Minimum allowed position [degree]
      VFDSpeed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Speed to run in automatic mode [degree/s]
      Position { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..10] of Int;   // Positions in degree's to move to as requested
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageHeader"
VERSION : 0.1
   STRUCT
      STX { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Char;
      MessageLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];
      MessageType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExCommands"
VERSION : 0.1
   STRUCT
      StartSort : Struct   // Sent to LLC to designate the Sort has started. – Functionality to include reset of LLC Application buffers from previous sort
         NewMessage : Bool;   // New message received from UDS
         StartSort : Bool;   // Sent to LLC to designate the Sort has started. – Functionality to include reset of LLC Application buffers from previous sort
      END_STRUCT;
      EndSort : Struct   // Sent to LLC to designate the Sort has stopped. This message should not clear LLC counters. To be used in future cases.
         NewMessage : Bool;   // New message received from UDS
         EndSort : Bool;   // Sent to LLC to designate the Sort has stopped. This message should not clear LLC counters. To be used in future cases.
      END_STRUCT;
      UploadChuteStatus : Struct   // Sent to LLC so HLC can receive an update of all the current chute status. This information is required to work in optimal conditions when chute grouping has been enabled.
         NewMessage : Bool;   // New message received from UDS
      END_STRUCT;
      UploadAllStatus : Struct   // Sent to LLC so HLC can receive an update of the current equipment status.
         NewMessage : Bool;   // New message received from UDS
      END_STRUCT;
      BlockDivertSmalls : Struct   // Divert Block sent to the LLC when a bag is determined Full by the HLC, when a bag must be closed at the beginning of a sort, and to prevent miss-sorts during assignment changes. (Automated Smalls Only)
         NewMessage : Bool;   // New message received from UDS
         SorterNumber : String[5];   // Sorter number
         DivertNumber : String[6];   // Diverter number
      END_STRUCT;
      UnblockDivertSmalls : Struct   // Divert Unblock sent to the LLC when a bag is determined Full by the HLC, when a bag must be closed at the beginning of a sort, and to prevent miss-sorts during assignment changes. (Automated Smalls Only)
         NewMessage : Bool;   // New message received from UDS
         SorterNumber : String[5];   // Sorter number
         DivertNumber : String[6];   // Diverter number
      END_STRUCT;
      EnablePurge : Struct   // Purge Enable command including up to five chutes sent to the LLC when an Operator enables Purge on the HLC.
         NewMessage : Bool;   // New message received from UDS
         PLC : String[6];   // PLC Number
         Chute : Array[1..5] of String;   // Chute number
      END_STRUCT;
      DisablePurge : Struct   // Purge disable command including up to five chutes sent to the LLC when an Operator enables Purge on the HLC.
         NewMessage : Bool;   // New message received from UDS
         PLC : String[6];   // PLC Number
         Chute : Array[1..5] of String[6];   // Chute number
      END_STRUCT;
      ChuteLamp : Struct   // Lamp on the chutes control from HLC
         NewMessage : Bool;   // New message received from UDS
         ChuteNumber : String[6];   // Chute number to control lamp.
         Mode : String[1];   // 0=Off, 1=On, 2=Slow blink, 3=Blink, 4=Fast blink
         Color : String[9];   // 1= Red, 2=Green, 3=Orange
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemPO"
VERSION : 0.1
   STRUCT
      ToMCAliveCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Motion controller is communicating
      ToMCActiveOpMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Operational mode request: 0 = No Operation; 1 = Auto; 2 = Manual
      ToMCControl1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // System control 1
         Start { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Start system in auto mode
         LocalSafetyReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Local safety reset
         Abort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Abort command to interrupt every movement programmed
         Spare_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Bypass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - bypass mode
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         StressTest { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Start system in stress test mode
         Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Alarm reset
         ServoON { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Power-On enable
         HomingReq { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - After the poer-on in homing mode the system perform an homing
         Spare_11 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_12 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_13 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_14 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_15 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
      END_STRUCT;
      ToMCControl2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // System control 2
         Spare_0 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Ax_BeltRunFwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Ax_BeltRunBkwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_7 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_8 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_9 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_10 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_11 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_12 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Spare_13 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Spare
         Ax1_PosRight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Motor 1 Section 1 - command for positioningon the right
         Ax1_PosLeft { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System control - Motor 1 Section 1 - command for positioningon the left
      END_STRUCT;
      "ToMCAx[1]" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // Axis 1 control word
         Jog_Fwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - jog forward
         Jog_Bkwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - jog backward
         Abort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - abort eachmovement programmed
         Spare_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Spare_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Fault
         Spare_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         ZeroDirectReq { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - request to perform a recording of actual position with value 0 (use only and exlusively with the conveyor in midlle position)
         Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - reset
         Servo_ON { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - power and servo On (only for axis selected, the other axes are disabled with Servo-Off)
         Homing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - request to perform an homing procedure
         PosAbs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control -  request to perform an absolute positioning
         Spare_12 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Stop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - stop
         QuickStop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - stop for emergency
         spare_15 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
      END_STRUCT;
      "ToMCAx[1]SpeedSetpoint" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Speed setpoint [degree/s*10]
      "ToMCAx[1]Spare2" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 control - Spare
      "ToMCAx[1]Spare3" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 control - Spare
      "ToMCAx[1]PositionSetpointRight" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 control - Position setpoint right [degree*10]
      "ToMCAx[1]PositionSetpointLeft" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 control - Position setpoint left [degree*10]
      "ToMCAx[2]" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // Axis 2 control word
         Jog_Fwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - jog forward
         Jog_Bkwd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - jog backward
         Abort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - abort eachmovement programmed
         Spare_3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Spare_4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Fault
         Spare_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         ZeroDirectReq { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - request to perform a recording of actual position with value 0 (use only and exlusively with the conveyor in midlle position)
         Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - reset
         Servo_ON { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - power and servo On (only for axis selected, the other axes are disabled with Servo-Off)
         Homing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - request to perform an homing procedure
         PosAbs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control -  request to perform an absolute positioning
         Spare_12 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Spare
         Stop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - stop
         QuickStop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - stop for emergency
         Direction { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected control - Rotation direction
      END_STRUCT;
      "ToMCAx[2]SpeedSetpoint" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 Speed setpoint [mm/s*10]
      "ToMCAx[2]Acceleration" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 Acceleration [mm/s2]
      "ToMCAx[2]Deceleration" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 Deceleration [mm/s2]
      "ToMCAx[2]Adjustment" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 Speed control adjustment
      "ToMCAx[2]PositionSetpoint" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 control - Position setpoint for absolute or relative positioning
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemPI"
VERSION : 0.1
   STRUCT
      FromMCAliveCount { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Motion controller is communicating
      FromMCActiveOpMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Operational mode active: 0 = No Operation; 1 = Auto; 2 = Manual; 10 = Maintenance; 12 = Maintenance manual; 13 = Homing; 14 = stress test activated
      FromMCStatus1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // System status 1
         Running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Running
         LocalSafetyResetRequired { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Local safety reset required
         Aborted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Current procedure or command aborted
         STO_OK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - STO on drive module 1 and 2 activated
         ECAT_error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Ethercat fault
         PN_error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Profinet fault
         Bypass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Bypass mode active
         StressTestOn { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Stress test active
         ControlUnitReady { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Control unit ready for operation
         Servo_active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Motors powered and servo active
         Homing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Homing procedure in progress
         Homed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Homing performed
         Fault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Fault active
         Spare_13 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Ready for operation
         Spare_15 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
      END_STRUCT;
      FromMCStatus2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // System status 2
         SafetySwitch_1_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Infeeding photoeye engaged signal
         SafetySwitch_2_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Safety switch 1 engaged signal
         SafetySwitch_3_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Safety switch 2 engaged signal
         Outfeeding_Photoeye_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Outfeeding photoeye engaged signal
         Infeeding_Photoeye_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         LimitSwitch_RH_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Limit switch RH egaged signal
         LimitSwitch_LH_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Limit switch LH egaged signal
         HomeSwitch_Engaged { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Home switch egaged signal
         Spare_8 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Spare_9 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Spare_10 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Spare_11 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Spare_12 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Spare_13 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Spare
         Ax1_PositionedRight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Motor 1 Section 1 - positioned on the right
         Ax1_PositionedLeft { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // System status - Motor 1 Section 1 - positioned on the left
      END_STRUCT;
      "FromMCAx[1]" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // Axis 1 status word
         Fwd_Running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Motor in forward running
         Bkwd_Running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Motor in backward running
         Aborted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - current procedure or command aborted
         STO_Ok { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Safe torque OFF ok
         Fault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Fault
         Bypass { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Axis bypassed
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Spare
         ZeroDone { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - 0 performed on actual position
         Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - ready for operation
         Servo_active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - servo mode active
         Homing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - homing procedure in progress
         Homed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - homing performed
         Positioning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - positioning in progress
         Positioned { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - positioned
         Standstill { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - motor stopped
         Spare_15 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Spare
      END_STRUCT;
      "FromMCAx[1]ErrorCode" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 status - Error code
      "FromMCAx[1]ActualSpeed" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 status - Actual speed [degrees*10/s]
      "FromMCAx[1]ActualCurrent" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 status - Actual current [A*100]
      "FromMCAx[1]ActualTorque" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 status - Actual torque [%*100]
      "FromMCAx[1]ActualPosition" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 1 status - Actual position [degrees*100]
      "FromMCAx[2]" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // Axis 2 status word
         Fwd_Running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Motor in forward running
         Bkwd_Running { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Motor in backward running
         Aborted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - current procedure or command aborted
         STO_Ok { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Safe torque OFF ok
         Fault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Fault
         Spare_5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Spare
         Spare_6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Spare
         ZeroDone { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - 0 performed on actual position
         Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - ready for operation
         Servo_active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - servo mode active
         Homing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - homing procedure in progress
         Homed { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - homing performed
         Positioning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - positioning in progress
         Positioned { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - positioned
         Standstill { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - motor stopped
         Spare_15 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Axis selected status - Spare
      END_STRUCT;
      "FromMCAx[2]ErrorCode" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 status - Error code
      "FromMCAx[2]ActualSpeed" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 status - Actual speed [mm/s*10]
      "FromMCAx[2]ActualCurrent" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 status - Actual current [A*100]
      "FromMCAx[2]ActualTorque" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 status - Actual torque [%*100]
      "FromMCAx[2]ActualPosition" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Axis 2 status - Actual position [degrees*100]
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemConfiguration"
VERSION : 0.1
   STRUCT
      VFDPNDeviceName { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;   // VFD's device name
      PositioningAxis { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_VfdKebaSystemPositioningAxisConfiguration";   // Positioning axis configuration
      SpeedAxis { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_VfdKebaSystemSpeedAxisConfiguration";   // Speed axis configuration
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageWS"
VERSION : 0.1
   STRUCT
      Header { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_FedExMessageHeader";
      SCLSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of weight scale.
      PackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Number assigned by the LLC system
      SCLWT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Scale weight of package in resolution of scale system.
      SCLWTUOM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Unit of measurement for Weight
      SCLLFTStatusCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Scale LFT status code.
      AlibiWeight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[25];   // Alibi for Weight
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageSI"
VERSION : 0.1
   STRUCT
      Header { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_FedExMessageHeader";
      ADCSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of Automated Data Capture system.
      ScanUnitType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Scan Unit Type
      ImageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Image ID number (000001 to 999999), token for the parcel created by the ADCsystem.
      PackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Number assigned by the LLC system or ADC system
      HLCPackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[10];   // Unique number for the specific package during it stays in HLC system.
      DIMSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of dimensioning system
      DimStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];
      PackageDimLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Length dimension of package in resolution of dim system.
      PackageDimWidth { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Width dimension of package in resolution of dim system.
      PackageDimHeight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Height dimension of package in resolution of dim system.
      DIMUOM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Unit of measure of the package dimensions.
      DimLFTstatusCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Dimension LFT status code.
      AlibiDims { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[25];   // Alibi for Dimensions
      SCLSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of weight scale.
      SCLStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Basic diagnostic information from the weight scale system.
      SCLWT { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Scale weight of package in resolution of scale system.
      SCLWTUOM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Unit of measurement for Weight
      SCLLFTStatusCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Scale LFT status code.
      AlibiWeight { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[25];   // Alibi for Weight
      Stackable { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // If stackable recognition is enabled, Y or N
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
      Barcode1Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode1status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode1datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode1data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      Barcode2Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode2status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode2datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode2data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      Barcode3Identification { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Barcode identifier code.
      Barcode3status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Barcode confidence factor
      Barcode3datalength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // String length of barcode data in bytes; inclusive of this field. Use 0054 as a fixed value
      Barcode3data { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Highest priority barcode
      TotalBarcodeDataLength { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // Length of all barcode data that was sent in bytes;
      PackageDataTruncated { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Y = Full length of barcode data exceeds 9999 bytes, data truncated
      CameraHeadstatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Diagnostic information on camera/laser heads performing barcode reads.
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessagePS"
VERSION : 0.1
   STRUCT
      SystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of the system.
      ParameterID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // Parameter code to identify which parameter value is being set
      ParameterValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[82];   // New value for the specified parameter
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local Time Timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time Zone Designator
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemStatus"
VERSION : 0.1
   STRUCT
      AX1ErrorCode : Int;   // Axis 1 error code (Rotation)
      AX2ErrorCode : Int;   // Axis 2 error code (Belt)
      PNSlaveNotOnline : Bool := FALSE;   // Profinet slave is not on line
      PNSlaveError : Bool := FALSE;   // Profinet slave has an error
      Axis1InternalError : Bool := FALSE;   // Axis 1 internal error is active, see error code
      Axis2InternalError : Bool := FALSE;   // Axis 2 internal error is active, see error code
      CommunicationError : Bool := FALSE;   // Communication error
      PositioningTimeWarning : Bool := FALSE;   // Exceeded time to reach position
      PNSlaveWarning : Bool := FALSE;   // Profinet slave has a warning
      MaintenanceWarning : Bool := FALSE;   // Maintenance mode active (local control enabled)
      HomingActiveWarning : Bool := FALSE;   // Homing mode activated
      StressTestActiveWarning : Bool := FALSE;   // Stress test mode activated
      MaintenanceManualActiveWarning : Bool := FALSE;   // Manual mode in maintenance activated
   END_STRUCT;

END_TYPE

TYPE "UDT_VfdKebaSystemStatistics"
VERSION : 0.1
   STRUCT
      PNSlaveNotOnline { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics of Profinet slave not online
      PNSlaveError { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics of a Profinet slave error
      Ax1InternalError { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics of an axis 1 internal error
      Ax2InternalError { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics of an axis 2 internal error
      CommunicationError { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics of a communication error
      Ax1Running { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics for axis 1 running time
      Ax2Running { S7_SetPoint := 'False'} : "UDT_EventStatistic";   // Statistics for axis 2 running time
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageDaRa"
VERSION : 0.1
   STRUCT
      LLCSystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Identifier of Low-Level controls
      PackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // Number assigned by the LLC system
      HLCPackageID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[10];   // Unique number for the specific package during it stays in HLC system.
      CellNumber { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[4];   // Tray/Cell number (for loop sorters) or generated by LLC (on line sorters).
      Destination1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      Destination2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      Destination3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      Destination4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      Destination5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Location code value that describes where the package should go (Diverter Number).
      CutOffTimeDestination5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Cut Off Time in Local Time.
      HLCDataText { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[20];   // Free text for future use.
      Barcodedata { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[50];   // Sortation barcode
      HLCResultCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[16];   // Result code based on processing of the scan event messages.
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageCD"
VERSION : 0.1
   STRUCT
      CommandCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Generated during configuration.It is a fixed value for all systems
      CommandValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[82];   // System ID of the system making the request.
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
   END_STRUCT;

END_TYPE

TYPE "UDT_FedexLoginStatus"
VERSION : 0.1
   STRUCT
      Accepted : Bool;
      Rejected : Bool;
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExHeartbeatStatistics"
TITLE = UDT_HeartbeatStatistics
VERSION : 0.1
//User-defined structure of FB_Heartbeat function block statistics.
   STRUCT
      ConLost { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;   // Statistics of connection lost
      MsgNotSent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;   // Statistics of not send messages when it was requested
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExDestinations"
VERSION : 0.1
   STRUCT
      PhysicalDestination { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      Destination { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..5] of DInt;   // Destination code to compare to to go to position
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageLoginResponse"
VERSION : 0.1
   STRUCT
      Header { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_FedExMessageHeader";
      FacilityID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Generated during configuration.It is a fixed value for all systems
      SystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // System ID of the system making the request.
      VersionID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Interface document version.
      ConnectionStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[1];   // Y=Succes, N=Failure
      LocalHost { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[32];   // IP Address of the existing connection. If this is the first connection, IP Address or Hostname of the connecting host.
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageEquipmentStatus"
VERSION : 0.1
   STRUCT
      LLCSystemID : String[15];   // PLC System ID
      DeviceType : String[6];   // Device type
      DeviceID : String[6];   // Device ID
      StatusCode : String[3];   // StatusCode
      Timestamp : String[17];   // Local time timestamp
      TimeZoneDesignator : String[5];   // Time zone designator
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageCommand"
VERSION : 0.1
   STRUCT
      CommandCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[3];   // Generated during configuration.It is a fixed value for all systems
      CommandValue { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[82];   // System ID of the system making the request.
      Timestamp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[17];   // Local time timestamp
      TimeZoneDesignator { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[5];   // Time zone designator
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessage"
VERSION : 0.1
   STRUCT
      Facility { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_FedExFacility";
      Receive { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         Result { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
         Done { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Fault { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Message { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            B { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..0999] of Byte;
            WS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : WString[1000];
         END_STRUCT;
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "UDT_FedExMessageLogin"
VERSION : 0.1
   STRUCT
      FacilityID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[8];   // Generated during configuration.It is a fixed value for all systems
      SystemID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[15];   // System ID of the system making the request.
      VersionID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[6];   // Interface document version.
      SS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String[2];   // Maximum frequency of messages
   END_STRUCT;

END_TYPE

